{
  "swagger": "2.0",
  "basePath": "/document-information-extraction/v1",
  "paths": {
    "/capabilities": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Capabilities"
            }
          }
        },
        "summary": "Get the service capabilities",
        "description": "Returns the JSON consisting of lists of extractable fields, enrichment and document types that the service is         capable of processing.",
        "operationId": "get_capabilities",
        "tags": [
          "Capabilities"
        ]
      }
    },
    "/clients": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestInvalidParamError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClientPayload"
            }
          }
        },
        "summary": "Retrieve all client names and IDs that are accessible by the caller",
        "description": "Returns all the client details as a list in the **`payload`** key in the returned JSON.",
        "operationId": "get_client",
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "description": "Filters the list of clients by the characters the id starts with.",
            "name": "clientIdStartsWith"
          },
          {
            "type": "integer",
            "required": false,
            "in": "query",
            "description": "Index of the first client to be retrieved. Example: 10",
            "name": "offset"
          },
          {
            "type": "integer",
            "required": true,
            "in": "query",
            "description": "Number of clients to retrieve (maximum allowed value: 50000). Example: 10",
            "name": "limit"
          }
        ],
        "tags": [
          "Client"
        ]
      },
      "delete": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientDeletionFailedError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteClient"
            }
          }
        },
        "summary": "Delete one or more clients",
        "description": "Returns an error if any of the specified client IDs does not exist.",
        "operationId": "delete_client",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteClientPayload"
            }
          }
        ],
        "tags": [
          "Client"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "429": {
            "description": "Application Quota Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/429ConsumptionQuotaExceededError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotAddedError"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PostClient"
            }
          }
        },
        "summary": "Create one or more clients",
        "description": "To create a client, two parameters must be specified: **`clientId`** and **`clientName`**. The list of clients         to be created must be sent as a JSON payload in the request.\n\n### Examples for payload parameter:\nSingle client: `{\"value\":[{\"clientId\":\"c_00\",\"clientName\":\"client 00\"}]}`\nMultiple clients: `{\"value\":[{\"clientId\":\"c_00\",\"clientName\":\"client 00\"},         {\"clientId\":\"c_01\",\"clientName\":\"client 01\"}]}`\n\n### Field values:\n- The spaces at the beginning and the end of the value strings are removed.",
        "operationId": "post_client",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostClientPayload"
            }
          }
        ],
        "tags": [
          "Client"
        ]
      }
    },
    "/configuration": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetConfigurationsResponse"
            }
          }
        },
        "summary": "Get all configurations for the requested scope",
        "operationId": "get_configuration_resource",
        "parameters": [
          {
            "type": "string",
            "enum": [
              "client",
              "instance",
              "active",
              "tenant"
            ],
            "in": "query",
            "description": "Scope of the configuration. If left empty, default scope is 'active'.",
            "name": "scope"
          },
          {
            "type": "string",
            "in": "query",
            "description": "The client to set the configuration for. Only used for client scope configuration.",
            "name": "clientId"
          },
          {
            "type": "string",
            "in": "query",
            "description": "Tenant to get configurations for. Defaults to the tenant sending the request.",
            "name": "tenantId"
          }
        ],
        "tags": [
          "Configuration"
        ]
      },
      "delete": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestInvalidJsonError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteConfigurationsResponse"
            }
          }
        },
        "summary": "Delete configurations on the given scope according to the given payload",
        "description": "Accepts an array of keys in the payload for configurations to be deleted.\nIf an empty array is given, all configurations will be deleted.",
        "operationId": "delete_configuration_resource",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteConfigurationsRequest"
            }
          },
          {
            "type": "string",
            "enum": [
              "client",
              "instance",
              "tenant"
            ],
            "in": "query",
            "description": "Scope of the configuration. If left empty, default scope is 'tenant'.",
            "name": "scope"
          },
          {
            "type": "string",
            "in": "query",
            "description": "The client to set the configuration for. Only used for client scope configuration.",
            "name": "clientId"
          },
          {
            "type": "string",
            "in": "query",
            "description": "Tenant to which the configuration change is applied. Defaults to the tenant sending the request.",
            "name": "tenantId"
          }
        ],
        "tags": [
          "Configuration"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CreateConfigurationsResponse"
            }
          }
        },
        "summary": "Create or update configurations based on the given payload",
        "description": "Configurations can be set on tenant, instance\nor client level.",
        "operationId": "post_configuration_resource",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateConfigurationsRequest"
            }
          },
          {
            "type": "string",
            "enum": [
              "client",
              "instance",
              "tenant"
            ],
            "in": "query",
            "description": "Scope of the configuration. If left empty, default scope is 'tenant'.",
            "name": "scope"
          },
          {
            "type": "string",
            "in": "query",
            "description": "The client to set the configuration for. Only used for client scope configuration.",
            "name": "clientId"
          },
          {
            "type": "string",
            "in": "query",
            "description": "Tenant to which the configuration change is applied. Defaults to the tenant sending the request.",
            "name": "tenantId"
          }
        ],
        "tags": [
          "Configuration"
        ]
      }
    },
    "/configuration/{key}": {
      "parameters": [
        {
          "type": "string",
          "enum": [
            "client",
            "instance",
            "active",
            "tenant"
          ],
          "in": "query",
          "description": "Scope of the configuration. If left empty, default scope is 'active'.",
          "name": "scope"
        },
        {
          "type": "string",
          "in": "query",
          "description": "The client to set the configuration for. Only used for client scope configuration.",
          "name": "clientId"
        },
        {
          "type": "string",
          "in": "query",
          "description": "Tenant to get configurations for. Defaults to the tenant sending the request.",
          "name": "tenantId"
        },
        {
          "description": "Key must be one of the following predefined keys: ['performPIICheck',\n 'clientSegregation',\n 'manualDataActivation',\n 'coordinateFormat',\n 'activateDocumentNotifications',\n 'dataFeedbackCollection',\n 'documentRetentionTimeDays',\n 'enrichmentConfidenceThreshold']",
          "name": "key",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request"
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetConfigurationsResponse"
            }
          }
        },
        "summary": "Get configurations for the requested key and the requested scope",
        "operationId": "get_tenant_configuration_resource_with_key",
        "tags": [
          "Configuration"
        ]
      }
    },
    "/data": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestDataRetrieveFailedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetData"
            }
          }
        },
        "summary": "Retrieve one or more data entities that match the provided query",
        "description": "Returns a JSON response with previously uploaded data entities, which match the provided query. If a single         entity matches the query, the response will contain only one entity, otherwise the response will be a list of         entities.",
        "operationId": "get_data",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "Type of data which is handled(employee, businessEntity, product)",
            "enum": [
              "employee",
              "businessEntity",
              "product"
            ]
          },
          {
            "name": "clientId",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "The ID of the client. Example: clientId = c_00"
          },
          {
            "name": "id",
            "in": "query",
            "type": "string",
            "description": "The data ID of a single entry"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "description": "Offset of the first item to be returned. Example: 10"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "Items per page. Defines a maximum. Example: 10"
          },
          {
            "name": "subtype",
            "in": "query",
            "type": "string",
            "description": "The subtype of data either supplier, customer, companyCode for business entity.",
            "enum": [
              "supplier",
              "customer",
              "companyCode"
            ]
          },
          {
            "name": "system",
            "in": "query",
            "type": "string",
            "description": "The system of the a single entry."
          },
          {
            "name": "companyCode",
            "in": "query",
            "type": "string",
            "description": "The company code of the a single entry."
          }
        ],
        "tags": [
          "Data"
        ]
      }
    },
    "/data/activation": {
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestPostActivationJobFailedError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PostDataActivationResult"
            }
          }
        },
        "summary": "Create a data activation job record",
        "operationId": "post_data_activation_save",
        "parameters": [
          {
            "type": "string",
            "enum": [
              "employee",
              "businessEntity",
              "product"
            ],
            "in": "query",
            "description": "Type of data which is handled(employee, businessEntity, product)",
            "name": "type"
          },
          {
            "type": "string",
            "enum": [
              "supplier",
              "customer",
              "companyCode"
            ],
            "in": "query",
            "description": "The subtype of data either supplier, customer, companyCode for business entity.",
            "name": "subtype"
          }
        ],
        "tags": [
          "Data"
        ]
      }
    },
    "/data/activation/{id}": {
      "parameters": [
        {
          "description": "The ID returned by `[POST]/data/activation` endpoint. Example: 29812f26-464e-4ee6-be63-731859cf99f3",
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestActivationJobRetrieveFailedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetActivationJob"
            }
          }
        },
        "summary": "Give a data persistence job ID to check the database and receive information on this data activation job",
        "description": "This endpoint will return a JSON with the status and processed time of the data activation job specified by\nthe given ID",
        "operationId": "get_data_activation_get",
        "tags": [
          "Data"
        ]
      }
    },
    "/data/jobs": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestDataRetrieveFailedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetPendingDataPersistenceJobs"
            }
          }
        },
        "summary": "Retrieve a list of all data-persistence jobs for this tenant",
        "description": "Supports additional filtering by client & job status and sorting by creation date, client & job status.",
        "operationId": "get_data_save",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "type": "string",
            "description": "The status of this data-persistence job. Possible values: ['PENDING', 'SUCCESS', 'FAILED']"
          },
          {
            "name": "clientId",
            "in": "query",
            "type": "string",
            "description": "The ID of the client. Example: clientId = c_00"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "description": "Offset of the first item to be returned. Example: 10"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "Items per page. Defines a maximum. Example: 10"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "Ordering criterion for the retrieved data-persistence jobs (possible values: status, client, created). Example: created asc"
          }
        ],
        "tags": [
          "Data"
        ]
      },
      "delete": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "422": {
            "description": "Unprocessable Entity. Size of entity exceeds request limit of 10000.",
            "schema": {
              "$ref": "#/definitions/DataLimitExceededError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestDataPersistFailedError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteDataResult"
            }
          }
        },
        "summary": "Perform the asynchronous deletion of existing data entities for the specified fields",
        "description": "Performs the deletion of existing data entities for the specified fields. It accepts an array of IDs in the         payload that should be deleted. If no array is given, all entries will be deleted. It is required to use this         asynchronous endpoint for larger amounts of records, but it is recommended to use it for small amounts as well.",
        "operationId": "delete_data_save",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteDataPayload"
            }
          },
          {
            "type": "string",
            "enum": [
              "employee",
              "businessEntity",
              "product"
            ],
            "in": "query",
            "description": "Type of data which is handled(employee, businessEntity, product)",
            "name": "type"
          },
          {
            "type": "string",
            "in": "query",
            "description": "The ID of the client. Example: clientId = c_00",
            "name": "clientId"
          },
          {
            "type": "string",
            "enum": [
              "supplier",
              "customer",
              "companyCode"
            ],
            "in": "query",
            "description": "The subtype of data either supplier, customer, companyCode for business entity.",
            "name": "subtype"
          }
        ],
        "tags": [
          "Data"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "429": {
            "description": "Application Quota Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/429ConsumptionQuotaExceededError"
            }
          },
          "422": {
            "description": "Unprocessable Entity. Size of entity exceeds request limit of 10000.",
            "schema": {
              "$ref": "#/definitions/DataLimitExceededError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestDataPersistFailedError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PostDataResult"
            }
          }
        },
        "summary": "Create or update one or more data entities",
        "description": "Allows the asynchronous creation and update of data entities for a specified client ID. A request must contain         a valid JSON string as the payload parameter, which typically contains a list of multiple records of the same         data type. The result returned by this endpoint is the ID of the data persistence job responsible for         uploading/updating the data. This ID can be used in the GET /data endpoint to retrieve the current status of         the data persistence job.\nThe two data types that can be submitted are:\n- businessEntity - Has subtype of supplier, customer, companyCode or unspecified.\n- employee - Has no specified subtype.\n\nIn the payload JSON string, a mandatory field of ID must be provided for each data record for businessEntity         and employee.\n\n### Examples for payload parameter:\n**businessEntity**: `{\"value\": [{\"id\":\"BE0001\", \"name\":\"\",\"accountNumber\":\"\", \"address1\":\"\", \"address2\": \"\",         \"city\":\"\", \"countryCode\":\"\", \"postalCode\":\"\",\"state\":\"\", \"email\":\"\", \"phone\":\"\",         \"bankAccount\":\"\", \"taxId\":\"\"}]}`\n\n**employee**: `{\"value\": [{\"id\":\"E0001\", \"email\":\"\", \"firstName\":\"\", \"middleName\": \"\", \"lastName\":\"\"}]}`",
        "operationId": "post_data_save",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DataPayload"
            }
          },
          {
            "type": "string",
            "required": true,
            "enum": [
              "employee",
              "businessEntity",
              "product"
            ],
            "in": "query",
            "description": "Type of data which is handled(employee, businessEntity, product)",
            "name": "type"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client. Example: clientId = c_00",
            "name": "clientId"
          },
          {
            "type": "string",
            "enum": [
              "supplier",
              "customer",
              "companyCode"
            ],
            "in": "query",
            "description": "The subtype of data either supplier, customer, companyCode for business entity.",
            "name": "subtype"
          }
        ],
        "tags": [
          "Data"
        ]
      }
    },
    "/data/jobs/{id}": {
      "parameters": [
        {
          "description": "The ID returned by `[POST/DELETE]/data/jobs` endpoint. Example: 29812f26-464e-4ee6-be63-731859cf99f3",
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestDataRetrieveFailedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDataJob"
            }
          }
        },
        "summary": "Return information about a data persistence job",
        "description": "Takes a data persistence job ID as input and returns a JSON with the status and processing time of the         corresponding data persistence job.",
        "operationId": "get_data_id",
        "tags": [
          "Data"
        ]
      }
    },
    "/document/catalog": {
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PostDocumentsCatalogResult"
            }
          }
        },
        "summary": "Post a search/filter request to get the current status of document processing jobs",
        "description": "Returns a list with all document processing jobs as JSON.\nOptionally, the jobs can be filtered based on the client ID and a filter query.\nCatalog options:\n- pagination using limit and offset\n- ordering using order\n- filtering using filters",
        "operationId": "post_document_catalog",
        "parameters": [
          {
            "name": "options",
            "in": "formData",
            "type": "string",
            "description": "\nCatalog options used when searching for documents.\n- `clientId`: The ID of the client used while submitting the document. Example: c_00\n- `limit`: Number of documents to retrieve (maximum allowed value: 200). Example: 10\n- `offset`: Index of the first document to be retrieved. Example: 20\n- `order`: Ordering criterion for the retrieved documents (possible values: created, fileName, documentType, status). Example: created asc\n- `likeFilter`: Filter query for retrieving documents that uses the LIKE operator. The expression should follow the format \"fieldName like value\". Supported fields are: fileName. Example: \"fileName like \"test receipt\"\"\n- `filter`: Filter query for retrieving documents. The filter query needs to be an expression. The expression should follow the format \"fieldName op value <AND/OR> fieldName op value\". Supported fields are: documentType, created, status, customLabel, reviewStatus, tenantId, jobId. Possible operators (op) depend on the field. Example: \"status eq done\"\n",
            "default": "{\n  \"clientId\": \"c_00\",\n  \"limit\": 10,\n  \"offset\": 2,\n  \"order\": \"created desc\",\n  \"likeFilter\": \"fileName like \\\"test receipt\\\"\",\n  \"filter\": \"status eq failed or documentType eq invoice\"\n}"
          }
        ],
        "consumes": [
          "application/x-www-form-urlencoded",
          "multipart/form-data"
        ],
        "tags": [
          "Document"
        ]
      }
    },
    "/document/jobs": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDocumentsResult"
            }
          }
        },
        "summary": "Get the current status of document processing jobs",
        "description": "Returns a list with all document processing jobs as JSON. Optionally, the jobs can be filtered based on the         client ID.",
        "operationId": "get_document_jobs",
        "parameters": [
          {
            "type": "string",
            "required": false,
            "in": "query",
            "description": "The ID of the client used while submitting the document. Example: c_00",
            "name": "clientId"
          }
        ],
        "tags": [
          "Document"
        ]
      },
      "delete": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestInvalidJsonError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteAllDocumentsStatusMessage"
            }
          }
        },
        "summary": "Delete one or more documents and all related data",
        "description": "Performs the deletion of a list of documents and all related data like extracted field values and ground         truth. The payload is an optional array of IDs that will be deleted. If this parameter is not present, all         documents will be deleted.",
        "operationId": "delete_document_jobs",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteDocuments"
            }
          }
        ],
        "tags": [
          "Document"
        ]
      },
      "post": {
        "responses": {
          "503": {
            "description": "System is temporarily unavailable",
            "schema": {
              "$ref": "#/definitions/ServiceUnavailableError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "415": {
            "description": "Unsupported File Type",
            "schema": {
              "$ref": "#/definitions/415DocumentPostError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestNoFileUploadedError"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DocumentStatus"
            }
          }
        },
        "summary": "Submit a document for processing",
        "description": "Performs a document submission (e.g a **pdf**, **png** or **jpeg** file) for asynchronous processing. Returns         a document job ID if the document is submitted successfully. This ID can be used with other endpoints like         GET /document/jobs/{id} and DELETE /document/jobs/{id}.",
        "operationId": "post_document_jobs",
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The document you wish to submit for processing"
          },
          {
            "name": "options",
            "in": "formData",
            "type": "string",
            "description": "\nOptions for processing the document.\n- `headerFields`: List of header fields to be extracted from the submitted invoice.\n- `lineItemFields`: List of line item fields to be extracted from the submitted invoice.\n- `clientId`: The ID of the client. Example: 'c_00'\n- `documentType`: The type of document being uploaded. Choices: 'invoice', 'paymentAdvice', 'purchaseOrder', 'businessCard', 'deliveryNote', 'resume', 'birthCertificate'\n- `schemaName`/`schemaId`: The  name or ID of the schema to be used for this document. Either one of _schemaName_, _schemaId_ or _extraction_ field  must be provided but not multiple.\n- `schemaVersion`: The version number of the schema to be used for this document. In  the payload, _schemaId_ or _schemaName_ must be provided. If _schemaVersion_ is not provided default version 1 will  be used.\n- `receivedDate`: The date at which the document was received. Example: '2020-02-17'\n- `customLabel`: The label customer wants to use for the document. This is optional. If used, we can  query the corresponding document ID using the _POST /document/catalog_ endpoint.\n- `templateId`: The ID of the template to be used for this document. If _templateId_ is set, also  _schemaId_ or _schemaName_ must be provided. To detect templateId automatically, use the value  'detect' instead of the ID string.\n- `candidateTemplateIds`: IDs of templates from which the service automatically detects the  appropriate templateId.\n- `enrichment`: Activate matching and define number of results and types.\n",
            "default": "{\n  \"schemaName\": \"SAP_invoice_schema\",\n  \"clientId\": \"c_00\",\n  \"documentType\": \"invoice\",\n  \"receivedDate\": \"2020-02-17\",\n  \"enrichment\": {\n    \"sender\": {\n      \"top\": 5,\n      \"type\": \"businessEntity\",\n      \"subtype\": \"supplier\"\n    },\n    \"employee\": {\n      \"type\": \"employee\"\n    }\n  }\n}"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Document"
        ]
      }
    },
    "/document/jobs/{id}": {
      "parameters": [
        {
          "description": "The ID returned when a document is submitted via **`[POST]/document/jobs`** endpoint. Example: 4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff",
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestMissingParameterError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetDocumentResult"
            }
          }
        },
        "summary": "Retrieve the results of a document previously submitted for all requested fields",
        "description": "Takes the job ID of a previously submitted document and returns the corresponding processing results, or an         error, if the given ID was not found.",
        "operationId": "get_document_id",
        "parameters": [
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "description": "Set to true to return all fields and line items, even if no value could be found. The default behavior is to not return these null value fields.",
            "name": "returnNullValues"
          },
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "description": "Set to true to fetch the extracted values. Set to false to fetch the ground truth values if available; if ground truth values are not available, extracted values will be returned in any case. The default value is false. I.e. By default the system returns the ground truth with higher priority.",
            "name": "extractedValues"
          }
        ],
        "tags": [
          "Document"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestMissingParameterError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DocumentCreatedId"
            }
          }
        },
        "summary": "Save the ground truth (correct values for document fields) for the specified document job ID",
        "description": "Takes the job ID of a document submitted previously and returns the corresponding processing results, or an         error, if the given ID was not found.\nOnly the fields of a document (header fields and line item fields) and the enrichment data should be part of\nthe payload aside from the document ID since they are the only fields relevant for the ground truth.\nFor the fields, the following attributes are part of the ground truth:\n    - name (required)\n    - value (required)\n    - rawValue (optional)\n    - page (optional)\n    - coordinates (optional)\nFor enrichment data, the following attributes are relevant for the ground truth:\n    - id (required)",
        "operationId": "post_document_id",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostDocumentGroundTruth"
            }
          }
        ],
        "tags": [
          "Document"
        ]
      }
    },
    "/document/jobs/{id}/confirm": {
      "parameters": [
        {
          "description": "ID to identify the document",
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DocumentConfirmedId"
            }
          }
        },
        "summary": "Set document status to confirmed",
        "description": "Takes the job ID of a document and sets the document status to confirmed. Once a document is confirmed, it\ncannot be changed anymore (e.g. no more upload of ground truth will be possible).",
        "operationId": "post_document_confirm",
        "parameters": [
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "description": "Set to true to allow the document to be used for retraining",
            "name": "dataForRetraining"
          }
        ],
        "tags": [
          "Document"
        ]
      }
    },
    "/document/jobs/{id}/file": {
      "parameters": [
        {
          "description": "ID to identify the document",
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "410": {
            "description": "Gone",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Success",
            "headers": {
              "Content-Type": {
                "description": "application/octet-stream",
                "type": "string"
              }
            }
          }
        },
        "summary": "GET the original uploaded document",
        "operationId": "get_document_file",
        "produces": [
          "application/pdf",
          "image/png",
          "image/jpeg",
          "image/tiff",
          "application/octet-stream"
        ],
        "tags": [
          "Document"
        ]
      }
    },
    "/document/jobs/{id}/pages/text": {
      "parameters": [
        {
          "description": "ID to identify the document",
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PagesText"
            }
          }
        },
        "summary": "Retrieve the OCR output for all pages of a document",
        "description": "Takes the job ID of a document and returns the OCR output for all pages of a document.",
        "operationId": "get_document_pages_text",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Document"
        ]
      }
    },
    "/document/jobs/{id}/pages/{no}/text": {
      "parameters": [
        {
          "description": "ID to identify the document",
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "The page number of the document (int)",
          "name": "no",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PageText"
            }
          }
        },
        "summary": "Retrieve the OCR output for the specified page of a document",
        "description": "Takes the job ID and a single page number of a document and returns the OCR output for the respective page.",
        "operationId": "get_document_page_text",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Document"
        ]
      }
    },
    "/document/jobs/{id}/request": {
      "parameters": [
        {
          "description": "ID to identify the document",
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Content-Type": {
                "description": "application/json",
                "type": "string"
              }
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DocumentOptions"
            }
          }
        },
        "summary": "Retrieve the request payload of a previously submitted document",
        "description": "Takes the job ID of a document and returns the request payload specified during initial upload of the document.",
        "operationId": "get_document_request",
        "tags": [
          "Document"
        ]
      }
    },
    "/document/jobs/{id}/template": {
      "parameters": [
        {
          "description": "The ID returned when a document is submitted via **`[POST]/document/jobs`** endpoint. Example: 4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff",
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestMissingParameterError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DocumentTemplateAssociations"
            }
          }
        },
        "summary": "Retrieve all the templates associated with the document id",
        "operationId": "get_document_template",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client",
            "name": "clientId"
          }
        ],
        "tags": [
          "Document"
        ]
      }
    },
    "/schemas": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SchemaListed"
            }
          }
        },
        "summary": "Retrieve all schemas for a client",
        "operationId": "get_schema_configuration",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "description": "The offset of the query result start index to be returned"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "Max. number of records to be returned. If limit=0 (maximum allowed value: 1000), all records are returned."
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "description": "Order the results"
          },
          {
            "name": "predefined",
            "in": "query",
            "type": "boolean",
            "description": "Set to true for standard documents or false for custom documents"
          },
          {
            "name": "documentType",
            "in": "query",
            "type": "string",
            "description": "The type of the document used when creating the schema. Example: invoice, custom, paymentAdvice"
          },
          {
            "name": "clientId",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "The ID of the client used when creating the schema. Example: c_00"
          },
          {
            "name": "fetchVersions",
            "in": "query",
            "type": "boolean",
            "description": "Set this to true to fetch all schema versions. The default is false, which only fetches details about version 1 or the first version of the schema"
          }
        ],
        "tags": [
          "Schema"
        ]
      },
      "delete": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteSchema"
            }
          }
        },
        "summary": "Delete one or more schemas for a client",
        "operationId": "delete_schema_configuration",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteSchemas"
            }
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client used when creating the schema. Example: c_00",
            "name": "clientId"
          }
        ],
        "tags": [
          "Schema"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "429": {
            "description": "Application Quota Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/429ConsumptionQuotaExceededError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SchemaCreated"
            }
          }
        },
        "summary": "Create one or more schemas for a client",
        "operationId": "post_schema_configuration",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SchemaCreation"
            }
          }
        ],
        "tags": [
          "Schema"
        ]
      }
    },
    "/schemas/capabilities": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SchemaCapabilities"
            }
          }
        },
        "summary": "Retrieve all schema capabilities",
        "operationId": "get_schema_capabilities",
        "tags": [
          "Schema"
        ]
      }
    },
    "/schemas/{schemaId}": {
      "parameters": [
        {
          "description": "The ID returned when a schema is created via **`[POST]/schemas`** endpoint. Example: 4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff",
          "name": "schemaId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SchemaDetail"
            }
          }
        },
        "summary": "Retrieve schema details for a client",
        "operationId": "get_schema_configuration_uuid",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client used when creating the schema. Example: c_00",
            "name": "clientId"
          }
        ],
        "tags": [
          "Schema"
        ]
      },
      "put": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdateSchema"
            }
          }
        },
        "summary": "Update existing schemas for a client",
        "operationId": "put_schema_configuration_uuid",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Schemamodel"
            }
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client used when creating the schema. Example: c_00",
            "name": "clientId"
          }
        ],
        "tags": [
          "Schema"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "429": {
            "description": "Application Quota Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/429ConsumptionQuotaExceededError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SchemaVersionCreated"
            }
          }
        },
        "summary": "Create a new version for schema",
        "operationId": "post_schema_configuration_uuid",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client used when creating the schema. Example: c_00",
            "name": "clientId"
          }
        ],
        "tags": [
          "Schema"
        ]
      }
    },
    "/schemas/{schemaId}/versions": {
      "parameters": [
        {
          "type": "string",
          "required": true,
          "in": "query",
          "description": "The ID of the client used when creating the schema. Example: c_00",
          "name": "clientId"
        },
        {
          "description": "The ID returned when a schema is created via **`[POST]/schemas`** endpoint. Example: 4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff",
          "name": "schemaId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SchemaVersionListed"
            }
          }
        },
        "summary": "Retrieve all versions for schema",
        "operationId": "get_schema_version_configuration",
        "tags": [
          "Schema"
        ]
      },
      "delete": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteSchemaVersion"
            }
          }
        },
        "summary": "Delete versions associated with schema",
        "operationId": "delete_schema_version_configuration",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteVersion"
            }
          }
        ],
        "tags": [
          "Schema"
        ]
      }
    },
    "/schemas/{schemaId}/versions/{version}": {
      "parameters": [
        {
          "description": "The ID returned when a schema is created via **`[POST]/schemas`** endpoint. Example: 4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff",
          "name": "schemaId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "The version number returned when a new version is created via **`[POST]/schemas/<schema_id>`** endpoint. Example: 1",
          "name": "version",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SchemaVersionDetail"
            }
          }
        },
        "summary": "Retrieve version details of schema for a client",
        "operationId": "get_schema_version_configuration_uuid",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client used when creating the schema. Example: c_00",
            "name": "clientId"
          }
        ],
        "tags": [
          "Schema"
        ]
      }
    },
    "/schemas/{schemaId}/versions/{version}/activate": {
      "parameters": [
        {
          "description": "The ID returned when a schema is created via **`[POST]/schemas`** endpoint. Example: 4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff",
          "name": "schemaId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "The version number returned when a new version is created via **`[POST]/schemas/<schema_id>`** endpoint. Example: 1",
          "name": "version",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ActivateSchemaVersion"
            }
          }
        },
        "summary": "Activate the particular schema version of a schema",
        "operationId": "post_schema_version_activate",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client used when creating the schema. Example: c_00",
            "name": "clientId"
          }
        ],
        "tags": [
          "Schema"
        ]
      }
    },
    "/schemas/{schemaId}/versions/{version}/deactivate": {
      "parameters": [
        {
          "description": "The ID returned when a schema is created via **`[POST]/schemas`** endpoint. Example: 4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff",
          "name": "schemaId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "The version number returned when a new version is created via **`[POST]/schemas/<schema_id>`** endpoint. Example: 1",
          "name": "version",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeactivateSchemaVersion"
            }
          }
        },
        "summary": "Deactivate the particular schema version of a schema",
        "operationId": "post_schema_version_deactivate",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client used when creating the schema. Example: c_00",
            "name": "clientId"
          }
        ],
        "tags": [
          "Schema"
        ]
      }
    },
    "/schemas/{schemaId}/versions/{version}/fields": {
      "parameters": [
        {
          "description": "The ID returned when a schema is created via **`[POST]/schemas`** endpoint. Example: 4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff",
          "name": "schemaId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "The version number returned when a new version is created via **`[POST]/schemas/<schema_id>`** endpoint. Example: 1",
          "name": "version",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestClientNotExistsError"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FieldsSchemaVersion"
            }
          }
        },
        "summary": "Add fields to schema version",
        "operationId": "post_schema_version_fields",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SchemaFields"
            }
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client used when creating the schema. Example: c_00",
            "name": "clientId"
          }
        ],
        "tags": [
          "Schema"
        ]
      }
    },
    "/templates": {
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestTemplateGetErrorError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTemplateV2"
            }
          }
        },
        "summary": "Get templates for a client ID",
        "operationId": "get_template_v2",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "minimum": 0,
            "description": "The offset of the query result start index to be returned. Example: 0"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "minimum": 0,
            "description": "Max number of records to be returned. All records are returned if limit=0. Example: 10"
          },
          {
            "name": "order",
            "in": "query",
            "type": "string",
            "maxLength": 128,
            "description": "Order the results. Example: name asc"
          },
          {
            "name": "clientId",
            "in": "query",
            "type": "string",
            "maxLength": 64,
            "required": true,
            "description": "Client ID. Example: c_00"
          },
          {
            "name": "schemaId",
            "in": "query",
            "type": "string",
            "maxLength": 64,
            "description": "Schema ID. Example: 484b6e1c-501c-4a07-85cb-84554656a175"
          },
          {
            "name": "includeHeader",
            "in": "query",
            "type": "boolean",
            "description": "Result should include header fields"
          },
          {
            "name": "includeLineItems",
            "in": "query",
            "type": "boolean",
            "description": "Result should include line item fields"
          }
        ],
        "tags": [
          "Template"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestTemplateNotCreatedError"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PostTemplateResponse"
            }
          }
        },
        "summary": "Create or update a template",
        "description": "If an ID (template ID) is not provided, a template ID is generated and returned.\nIf an ID (template ID) is provided, but it is not in the system, a new record with template ID provided\nis created.\nIf an ID (template ID) is provided, and it is in the system, an update of record with same template ID\nis executed.",
        "operationId": "post_template_v2",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostTemplatePayload_v2"
            }
          }
        ],
        "tags": [
          "Template"
        ]
      }
    },
    "/templates/import": {
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestMissingParameterError"
            }
          },
          "201": {
            "description": "Created"
          }
        },
        "summary": "Import a template",
        "operationId": "post_template_v2_import",
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": true,
            "description": "The template file you wish to import"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client",
            "name": "clientId"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Template"
        ]
      }
    },
    "/templates/{template_id}": {
      "parameters": [
        {
          "type": "string",
          "required": true,
          "in": "path",
          "description": "The ID of the template. Example: '4176cc01-71f3-4b64-9eb0-cdd9c0cb27fd'",
          "name": "template_id"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestTemplateGetErrorError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetTemplateDetails_V2"
            }
          }
        },
        "summary": "Get template details for a template ID",
        "description": "A user is only allowed to retrieve template details that belong to the same zone_id and client_id.",
        "operationId": "get_template_detail_v2",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client",
            "name": "clientId"
          }
        ],
        "tags": [
          "Template"
        ]
      },
      "delete": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestTemplateGetErrorError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteTemplateV2"
            }
          }
        },
        "summary": "Delete a template and its links to the associated documents for template ID",
        "operationId": "delete_template_detail_v2",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client",
            "name": "clientId"
          }
        ],
        "tags": [
          "Template"
        ]
      }
    },
    "/templates/{template_id}/activate": {
      "parameters": [
        {
          "type": "string",
          "required": true,
          "in": "path",
          "description": "The ID of the template. Example: '4176cc01-71f3-4b64-9eb0-cdd9c0cb27fd'",
          "name": "template_id"
        }
      ],
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestMissingParameterError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TemplateActivateActionResponseV2"
            }
          }
        },
        "summary": "Activate a template",
        "operationId": "post_template_activate",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client",
            "name": "clientId"
          }
        ],
        "tags": [
          "Template"
        ]
      }
    },
    "/templates/{template_id}/deactivate": {
      "parameters": [
        {
          "type": "string",
          "required": true,
          "in": "path",
          "description": "The ID of the template. Example: '4176cc01-71f3-4b64-9eb0-cdd9c0cb27fd'",
          "name": "template_id"
        }
      ],
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestMissingParameterError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TemplateDeActivateActionResponseV2"
            }
          }
        },
        "summary": "Deactivate a template",
        "operationId": "post_template_deactivate",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client",
            "name": "clientId"
          }
        ],
        "tags": [
          "Template"
        ]
      }
    },
    "/templates/{template_id}/documents/{document_id}": {
      "parameters": [
        {
          "type": "string",
          "required": true,
          "in": "path",
          "description": "The ID of the document. Example: '5146ce05-7tf3-4g64-9eb0-vaa9f9cb22af'",
          "name": "document_id"
        },
        {
          "type": "string",
          "required": true,
          "in": "path",
          "description": "The ID of the template. Example: '4176cc01-71f3-4b64-9eb0-cdd9c0cb27fd'",
          "name": "template_id"
        }
      ],
      "delete": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestMissingParameterError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteAddedDocumentResponse"
            }
          }
        },
        "summary": "Dissociate a document from a template",
        "operationId": "delete_template_v2_document",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client",
            "name": "clientId"
          }
        ],
        "tags": [
          "Template"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestMissingParameterError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DocumentAddResponse"
            }
          }
        },
        "summary": "Associate a document with a template",
        "operationId": "post_template_v2_document",
        "parameters": [
          {
            "type": "boolean",
            "required": false,
            "in": "query",
            "description": "Set to false to skip document status validation when associating document with template. The default value is true.",
            "name": "validateDocumentStatus"
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client",
            "name": "clientId"
          }
        ],
        "tags": [
          "Template"
        ]
      }
    },
    "/templates/{template_id}/export": {
      "parameters": [
        {
          "type": "string",
          "required": true,
          "in": "path",
          "description": "The ID of the template. Example: '4176cc01-71f3-4b64-9eb0-cdd9c0cb27fd'",
          "name": "template_id"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "410": {
            "description": "Gone"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestMissingParameterError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success"
          }
        },
        "summary": "Export a template",
        "operationId": "get_template_v2_export",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client",
            "name": "clientId"
          }
        ],
        "tags": [
          "Template"
        ]
      }
    },
    "/templates/{template_id}/metadata": {
      "parameters": [
        {
          "type": "string",
          "required": true,
          "in": "path",
          "description": "The ID of the template. Example: '4176cc01-71f3-4b64-9eb0-cdd9c0cb27fd'",
          "name": "template_id"
        }
      ],
      "get": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestMissingParameterError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MetaDataFields"
            }
          }
        },
        "summary": "Get all metadata fields of a template",
        "operationId": "get_template_v2_meta_data",
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client",
            "name": "clientId"
          }
        ],
        "tags": [
          "Template"
        ]
      },
      "post": {
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerError"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequestMissingParameterError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedError"
            }
          },
          "201": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/TemplatePostMetadataResponse"
            }
          }
        },
        "summary": "Set metadata fields of a template",
        "description": "Payload parameter:\n- name(required): schema field name\n- value(optional): fixed value for header field, fixed value is only applicable to header fields and will be         ignored for line item fields. Default is null\n- extraction(optional): specify the extractor for the field, allow value are 'template' and 'schema'.         Default is 'template'\n- isLineItemField(optional): should be 'true' if field is a line item field. Default is 'false'",
        "operationId": "post_template_v2_meta_data",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MetaDataFields"
            }
          },
          {
            "type": "string",
            "required": true,
            "in": "query",
            "description": "The ID of the client",
            "name": "clientId"
          }
        ],
        "tags": [
          "Template"
        ]
      }
    }
  },
  "info": {
    "title": "Document Information Extraction",
    "version": "1.92",
    "description": "Document Information Extraction helps you to process large amounts of business documents that have content in headers and tables. You can use the extracted information, for example, to automatically process payables, invoices, or payment notes while making sure that invoices and payables match. After you upload a document file to the service, it returns the extraction results from header fields and line items.",
    "termsOfService": "All data uploaded by end users through these APIs is considered \u201cUser Content\u201d under the Terms of Use. SAP may use such data without restriction, including, without limitation, for developing data mining techniques, machine learning algorithms and software code that may be incorporated into SAP products and services."
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Capabilities",
      "description": "Capabilities API"
    },
    {
      "name": "Client",
      "description": "Client API"
    },
    {
      "name": "Configuration",
      "description": "Configuration API"
    },
    {
      "name": "Document",
      "description": "Document API"
    },
    {
      "name": "Data",
      "description": "Data API"
    },
    {
      "name": "Schema",
      "description": "Schema API"
    },
    {
      "name": "Template",
      "description": "Template API"
    }
  ],
  "definitions": {
    "InternalServerError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Internal server error"
        }
      },
      "type": "object"
    },
    "UnauthorizedError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "No Authorization given in the request header"
        }
      },
      "type": "object"
    },
    "Capabilities": {
      "properties": {
        "extraction": {
          "description": "Extractable fields along with associated datatypes",
          "allOf": [
            {
              "$ref": "#/definitions/FieldCapabilities"
            }
          ]
        },
        "documentTypes": {
          "type": "array",
          "description": "Document types which can be processed using Document Information Extraction service",
          "example": [
            "invoice",
            "paymentAdvice",
            "purchaseOrder",
            "businessCard",
            "deliveryNote",
            "resume",
            "birthCertificate"
          ],
          "items": {
            "type": "string"
          }
        },
        "enrichment": {
          "description": "Fields extracted from various types of documents along with supported documents for each field",
          "allOf": [
            {
              "$ref": "#/definitions/Enrichment"
            }
          ]
        },
        "isExternalModelConsumptionAllowed": {
          "type": "boolean",
          "example": "False"
        }
      },
      "type": "object"
    },
    "FieldCapabilities": {
      "properties": {
        "headerFields": {
          "type": "array",
          "example": [
            {
              "name": "documentNumber",
              "type": "string"
            },
            {
              "name": "taxId",
              "type": "string"
            },
            {
              "name": "...",
              "type": "type"
            }
          ],
          "items": {
            "$ref": "#/definitions/SingleFieldCapabilities"
          }
        },
        "lineItemFields": {
          "type": "array",
          "example": [
            {
              "name": "description",
              "type": "string"
            },
            {
              "name": "netAmount",
              "type": "number"
            },
            {
              "name": "purchaseOrderNumber",
              "type": "string"
            },
            {
              "name": "quantity",
              "type": "number"
            },
            {
              "name": "...",
              "type": "type"
            }
          ],
          "items": {
            "$ref": "#/definitions/SingleFieldCapabilities"
          }
        }
      },
      "type": "object"
    },
    "SingleFieldCapabilities": {
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Enrichment": {
      "properties": {
        "sender": {
          "type": "array",
          "example": [
            {
              "dataTypes": "businessEntity"
            }
          ],
          "items": {
            "$ref": "#/definitions/SingleEnrichmentCapabilities"
          }
        },
        "...": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SingleEnrichmentCapabilities"
          }
        }
      },
      "type": "object"
    },
    "SingleEnrichmentCapabilities": {
      "properties": {
        "dataTypes": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DeleteClientPayload": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "c_00"
          }
        }
      },
      "type": "object"
    },
    "PostClientPayload": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "description": "Client information",
            "example": {
              "clientId": "c_00",
              "clientName": "client 00"
            },
            "allOf": [
              {
                "$ref": "#/definitions/Client"
              }
            ]
          }
        }
      },
      "type": "object"
    },
    "Client": {
      "properties": {
        "clientId": {
          "type": "string",
          "maxLength": 128
        },
        "clientName": {
          "type": "string",
          "maxLength": 100
        }
      },
      "type": "object"
    },
    "BadRequestInvalidParamError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E52"
        },
        "message": {
          "type": "string",
          "example": "The parameter must be an integer."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "ClientPayload": {
      "properties": {
        "id": {
          "type": "string",
          "example": "1234"
        },
        "payload": {
          "type": "array",
          "example": [
            {
              "clientId": "c_00",
              "clientName": "client 00"
            },
            {
              "clientId": "c_01",
              "clientName": "client 01"
            },
            {
              "clientId": "c_02",
              "clientName": "client 02"
            },
            {
              "clientId": "c_03",
              "clientName": "client 03"
            },
            {
              "clientId": "c_04",
              "clientName": "client 04"
            }
          ],
          "items": {
            "description": "Client information",
            "example": {
              "clientId": "c_00",
              "clientName": "client 00"
            },
            "allOf": [
              {
                "$ref": "#/definitions/Client"
              }
            ]
          }
        }
      },
      "type": "object"
    },
    "BadRequestClientDeletionFailedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E24"
        },
        "message": {
          "type": "string",
          "example": "Client deletion failed."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "DeleteClient": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Successfully deleted 1 client(s)."
        }
      },
      "type": "object"
    },
    "429ConsumptionQuotaExceededError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E102"
        },
        "message": {
          "type": "string",
          "example": "Request exceeds consumption quotas."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "BadRequestClientNotAddedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E98"
        },
        "message": {
          "type": "string",
          "example": "Could not add clients."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "PostClient": {
      "properties": {
        "inserted": {
          "type": "integer",
          "example": 1
        },
        "modified": {
          "type": "integer",
          "example": 2
        }
      },
      "type": "object"
    },
    "BadRequestClientNotExistsError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E1"
        },
        "message": {
          "type": "string",
          "example": "Invalid client ID. The provided client ID does not exist."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "DeleteConfigurationsRequest": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Must be a predefined key from the following list: ['performPIICheck',\n 'clientSegregation',\n 'manualDataActivation',\n 'coordinateFormat',\n 'activateDocumentNotifications',\n 'dataFeedbackCollection',\n 'documentRetentionTimeDays',\n 'enrichmentConfidenceThreshold']",
            "example": "example_key_1"
          }
        }
      },
      "type": "object"
    },
    "CreateConfigurationsRequest": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Configurations key-value pairs"
        }
      },
      "type": "object"
    },
    "Configurations key-value pairs": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "Key: one from the predefined list of keys: ['performPIICheck',\n 'clientSegregation',\n 'manualDataActivation',\n 'coordinateFormat',\n 'activateDocumentNotifications',\n 'dataFeedbackCollection',\n 'documentRetentionTimeDays',\n 'enrichmentConfidenceThreshold'].\nValue: a non-empty string.",
      "example": {
        "example_key_1": "example_value_1"
      }
    },
    "GetConfigurationsResponse": {
      "properties": {
        "results": {
          "$ref": "#/definitions/Configurations key-value pairs"
        }
      },
      "type": "object"
    },
    "BadRequestInvalidJsonError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E56"
        },
        "message": {
          "type": "string",
          "example": "Invalid JSON found in the request."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "DeleteConfigurationsResponse": {
      "properties": {
        "deleted": {
          "type": "integer",
          "example": 2
        }
      },
      "type": "object"
    },
    "CreateConfigurationsResponse": {
      "properties": {
        "inserted": {
          "type": "integer",
          "example": 1
        },
        "modified": {
          "type": "integer",
          "example": 2
        }
      },
      "type": "object"
    },
    "DocumentConfirmedId": {
      "properties": {
        "status": {
          "type": "string",
          "example": "CONFIRMED"
        },
        "message": {
          "type": "string",
          "example": "Document confirmed successfully."
        }
      },
      "type": "object"
    },
    "PostDocumentGroundTruth": {
      "properties": {
        "languages": {
          "type": "array",
          "example": [
            "en"
          ],
          "items": {
            "type": "string"
          }
        },
        "country": {
          "type": "string",
          "example": "US",
          "maxLength": 5
        },
        "extraction": {
          "$ref": "#/definitions/DocumentExtractionGroundTruth"
        },
        "enrichment": {
          "$ref": "#/definitions/MatchedFieldsGroundTruth"
        }
      },
      "type": "object"
    },
    "DocumentExtractionGroundTruth": {
      "properties": {
        "headerFields": {
          "type": "array",
          "description": "Header fields of a document",
          "example": [
            {
              "name": "documentDate",
              "value": "2019-02-18",
              "rawValue": "02/18/2019",
              "page": 1,
              "coordinates": {
                "x": 0.700392156862745,
                "y": 0.0875757575757576,
                "w": 0.084313725490196,
                "h": 0.00878787878787879
              }
            },
            {
              "name": "grossAmount",
              "value": 200,
              "rawValue": "200.00",
              "page": 1,
              "coordinates": {
                "x": 0.892156862745098,
                "y": 0.836060606060606,
                "w": 0.0490196078431372,
                "h": 0.00878787878787879
              }
            }
          ],
          "items": {
            "type": "object"
          }
        },
        "lineItems": {
          "type": "array",
          "description": "Lineitems of a document",
          "example": [
            [
              {
                "name": "description",
                "value": "Professional Services",
                "rawValue": "Professional Services",
                "confidence": 0,
                "model": "ai",
                "label": "Description",
                "page": 1,
                "coordinates": {
                  "x": 0.29921568627451,
                  "y": 0.655151515151515,
                  "w": 0.0729411764705882,
                  "h": 0.00909090909090904
                }
              },
              {
                "name": "netAmount",
                "value": 200,
                "rawValue": "200.00",
                "label": "Net Amount",
                "confidence": 0,
                "model": "ai",
                "page": 1,
                "coordinates": {
                  "x": 0.867058823529412,
                  "y": 0.655151515151515,
                  "w": 0.0729411764705882,
                  "h": 0.00909090909090904
                }
              },
              {
                "name": "unitPrice",
                "value": 200,
                "rawValue": "200.00",
                "label": "Unit Price",
                "confidence": 0,
                "model": "ai",
                "page": 1,
                "coordinates": {
                  "x": 0.686666666666667,
                  "y": 0.655151515151515,
                  "w": 0.0309803921568628,
                  "h": 0.00878787878787879
                }
              },
              {
                "name": "materialNumber",
                "value": "007",
                "rawValue": "007",
                "label": "Material Number",
                "confidence": 0,
                "model": "ai",
                "page": 1,
                "coordinates": {
                  "x": 0.330588235294118,
                  "y": 0.655151515151515,
                  "w": 0.205490196078431,
                  "h": 0.0106060606060606
                }
              }
            ]
          ],
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "type": "object"
    },
    "MatchedFieldsGroundTruth": {
      "properties": {
        "sender": {
          "type": "array",
          "maxItems": 1,
          "items": {
            "$ref": "#/definitions/MatchedSender"
          }
        },
        "employee": {
          "type": "array",
          "maxItems": 1,
          "items": {
            "$ref": "#/definitions/MatchedEmployee"
          }
        }
      },
      "type": "object"
    },
    "MatchedSender": {
      "properties": {
        "id": {
          "type": "string",
          "example": "BE0001"
        },
        "confidence": {
          "type": "number",
          "example": 1
        }
      },
      "type": "object"
    },
    "MatchedEmployee": {
      "properties": {
        "id": {
          "type": "string",
          "example": "E0001"
        },
        "confidence": {
          "type": "number",
          "example": 1
        }
      },
      "type": "object"
    },
    "BadRequestMissingParameterError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E93"
        },
        "message": {
          "type": "string",
          "example": "Required parameters not provided."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "GetDocumentResult": {
      "properties": {
        "status": {
          "type": "string",
          "example": "DONE"
        },
        "id": {
          "type": "string",
          "example": "4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff"
        },
        "fileName": {
          "type": "string",
          "example": "invoice1-pdf",
          "maxLength": 255
        },
        "documentType": {
          "type": "string",
          "example": "invoice",
          "maxLength": 20
        },
        "created": {
          "type": "string"
        },
        "finished": {
          "type": "string"
        },
        "languages": {
          "type": "string"
        },
        "fileType": {
          "type": "string",
          "example": "pdf"
        },
        "country": {
          "type": "string",
          "maxLength": 5
        },
        "receivedDate": {
          "type": "string"
        },
        "extraction": {
          "$ref": "#/definitions/DocumentExtraction"
        },
        "enrichment": {
          "$ref": "#/definitions/MatchedFields"
        }
      },
      "type": "object"
    },
    "DocumentExtraction": {
      "properties": {
        "headerFields": {
          "type": "array",
          "description": "Header fields of a document",
          "example": [
            {
              "name": "documentDate",
              "value": "2019-02-18",
              "rawValue": "02/18/2019",
              "confidence": 0.995591627226936,
              "page": 1,
              "label": "Document Date",
              "model": "ai",
              "coordinates": {
                "x": 0.700392156862745,
                "y": 0.0875757575757576,
                "w": 0.084313725490196,
                "h": 0.00878787878787879
              }
            },
            {
              "name": "grossAmount",
              "value": 200,
              "rawValue": "200.00",
              "confidence": 0.996594140926997,
              "page": 1,
              "label": "Gross Amount",
              "model": "ai",
              "coordinates": {
                "x": 0.892156862745098,
                "y": 0.836060606060606,
                "w": 0.0490196078431372,
                "h": 0.00878787878787879
              }
            }
          ],
          "items": {
            "$ref": "#/definitions/DocumentHeaderField"
          }
        },
        "lineItems": {
          "type": "array",
          "description": "Lineitems of a document",
          "example": [
            [
              {
                "name": "description",
                "value": "Professional Services",
                "rawValue": "Professional Services",
                "confidence": 0,
                "model": "ai",
                "label": "Description",
                "page": 1,
                "coordinates": {
                  "x": 0.29921568627451,
                  "y": 0.655151515151515,
                  "w": 0.0729411764705882,
                  "h": 0.00909090909090904
                }
              },
              {
                "name": "netAmount",
                "value": 200,
                "rawValue": "200.00",
                "label": "Net Amount",
                "confidence": 0,
                "model": "ai",
                "page": 1,
                "coordinates": {
                  "x": 0.867058823529412,
                  "y": 0.655151515151515,
                  "w": 0.0729411764705882,
                  "h": 0.00909090909090904
                }
              },
              {
                "name": "unitPrice",
                "value": 200,
                "rawValue": "200.00",
                "label": "Unit Price",
                "confidence": 0,
                "model": "ai",
                "page": 1,
                "coordinates": {
                  "x": 0.686666666666667,
                  "y": 0.655151515151515,
                  "w": 0.0309803921568628,
                  "h": 0.00878787878787879
                }
              },
              {
                "name": "materialNumber",
                "value": "007",
                "rawValue": "007",
                "label": "Material Number",
                "confidence": 0,
                "model": "ai",
                "page": 1,
                "coordinates": {
                  "x": 0.330588235294118,
                  "y": 0.655151515151515,
                  "w": 0.205490196078431,
                  "h": 0.0106060606060606
                }
              }
            ]
          ],
          "items": {
            "$ref": "#/definitions/DocumentLineitem"
          }
        }
      },
      "type": "object"
    },
    "DocumentHeaderField": {
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 30
        },
        "value": {
          "type": "string"
        },
        "confidence": {
          "type": "number"
        },
        "model": {
          "type": "string"
        },
        "page": {
          "type": "integer"
        },
        "coordinates": {
          "example": {
            "x": 0.501960784313725,
            "y": 0.341212121212121,
            "w": 0.0870588235294118,
            "h": 0.00878787878787879
          },
          "allOf": [
            {
              "$ref": "#/definitions/FieldCoordinates"
            }
          ]
        }
      },
      "type": "object"
    },
    "FieldCoordinates": {
      "properties": {
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "w": {
          "type": "number"
        },
        "h": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "DocumentLineitem": {
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 30
        },
        "value": {
          "type": "string"
        },
        "confidence": {
          "type": "number"
        },
        "model": {
          "type": "string"
        },
        "page": {
          "type": "integer"
        },
        "coordinates": {
          "example": {
            "x": 0.501960784313725,
            "y": 0.341212121212121,
            "w": 0.0870588235294118,
            "h": 0.00878787878787879
          },
          "allOf": [
            {
              "$ref": "#/definitions/FieldCoordinates"
            }
          ]
        }
      },
      "type": "object"
    },
    "MatchedFields": {
      "properties": {
        "sender": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchedSender"
          }
        },
        "employee": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchedEmployee"
          }
        }
      },
      "type": "object"
    },
    "DocumentCreatedId": {
      "properties": {
        "status": {
          "type": "string",
          "example": "DONE"
        },
        "message": {
          "type": "string",
          "example": "Ground truth / corrected values uploaded successfully"
        }
      },
      "type": "object"
    },
    "DeleteDocuments": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff"
          }
        }
      },
      "type": "object"
    },
    "GetDocumentsResult": {
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "description": "List of documents",
            "example": [
              {
                "status": "DONE",
                "id": "c4f25368-d3e6-43f7-a0b4-55adf7f54e95",
                "fileName": "test receipt_invoice1.pdf",
                "documentType": "invoice",
                "created": "2020-03-26 17:00:00.000000+00:00",
                "clientId": "c_00",
                "finished": "2020-03-26 17:01:30.000000+00:00"
              },
              {
                "status": "PENDING",
                "id": "50199d80-c742-453b-830d-8e6ce14568e2",
                "fileName": "test receipt invoice2.pdf",
                "documentType": "invoice",
                "created": "2020-03-26 18:00:00.000000+00:00",
                "clientId": "c_00"
              },
              {
                "status": "FAILED",
                "id": "36799d80-c742-453b-830d-8e6ce14569c6",
                "fileName": "test receipt pa.pdf",
                "documentType": "paymentAdvice",
                "created": "2020-03-26 19:00:00.000000+00:00",
                "clientId": "c_00",
                "finished": "2020-03-26 19:01:30.000000+00:00"
              }
            ],
            "allOf": [
              {
                "$ref": "#/definitions/ListedDocument"
              }
            ]
          }
        }
      },
      "type": "object"
    },
    "ListedDocument": {
      "properties": {
        "status": {
          "type": "string",
          "example": "DONE"
        },
        "id": {
          "type": "string",
          "example": "c1673dee-56d6-4960-9a36-c29529f04b4a"
        },
        "fileName": {
          "type": "string",
          "example": "invoice.pdf"
        },
        "documentType": {
          "type": "string",
          "example": "invoice"
        },
        "created": {
          "type": "string",
          "format": "date",
          "example": "2020-03-26 17:00:00.000000+00:00"
        },
        "finished": {
          "type": "string",
          "format": "date",
          "example": "2020-03-26 17:02:00.000000+00:00"
        },
        "clientId": {
          "type": "string",
          "example": "c1"
        }
      },
      "type": "object"
    },
    "DeleteAllDocumentsStatusMessage": {
      "properties": {
        "status": {
          "type": "string",
          "example": "DONE"
        },
        "message": {
          "type": "string",
          "example": "Documents deleted successfully."
        },
        "processedTime": {
          "type": "string",
          "format": "date",
          "example": "2020-03-26T17:00:00.000000+00:00"
        }
      },
      "type": "object"
    },
    "ServiceUnavailableError": {
      "properties": {
        "message": {
          "type": "string",
          "example": "System is temporarily unavailable"
        }
      },
      "type": "object"
    },
    "415DocumentPostError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E11"
        },
        "message": {
          "type": "string",
          "example": "Error in parsing the document."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "BadRequestNoFileUploadedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E92"
        },
        "message": {
          "type": "string",
          "example": "No file was uploaded for processing."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "DocumentStatus": {
      "properties": {
        "id": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175"
        },
        "status": {
          "type": "string",
          "example": "PENDING"
        },
        "processedTime": {
          "type": "string",
          "format": "date",
          "example": "2020-03-26T17:00:00.000000+00:00"
        }
      },
      "type": "object"
    },
    "PostDocumentsCatalogResult": {
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "description": "List of documents",
            "example": [
              {
                "status": "DONE",
                "id": "c4f25368-d3e6-43f7-a0b4-55adf7f54e95",
                "fileName": "test receipt_invoice1.pdf",
                "documentType": "invoice",
                "created": "2020-03-26 17:00:00.000000+00:00",
                "clientId": "c_00",
                "finished": "2020-03-26 17:01:30.000000+00:00"
              },
              {
                "status": "PENDING",
                "id": "50199d80-c742-453b-830d-8e6ce14568e2",
                "fileName": "test receipt invoice2.pdf",
                "documentType": "invoice",
                "created": "2020-03-26 18:00:00.000000+00:00",
                "clientId": "c_00"
              },
              {
                "status": "FAILED",
                "id": "36799d80-c742-453b-830d-8e6ce14569c6",
                "fileName": "test receipt pa.pdf",
                "documentType": "paymentAdvice",
                "created": "2020-03-26 19:00:00.000000+00:00",
                "clientId": "c_00",
                "finished": "2020-03-26 19:01:30.000000+00:00"
              }
            ],
            "allOf": [
              {
                "$ref": "#/definitions/ListedDocument"
              }
            ]
          }
        },
        "usedOptions": {
          "description": "List of filtering/ordering options",
          "example": {
            "clientId": "c_00",
            "limit": 10,
            "offset": 2,
            "order": "created desc",
            "likeFilter": "fileName like \"test receipt\"",
            "filter": "status eq failed or documentType eq invoice"
          },
          "allOf": [
            {
              "$ref": "#/definitions/DocumentCatalogOptions"
            }
          ]
        },
        "totalDocumentCount": {
          "type": "integer",
          "example": 5
        }
      },
      "type": "object"
    },
    "DocumentCatalogOptions": {
      "properties": {
        "clientId": {
          "type": "string",
          "example": "c_00"
        },
        "limit": {
          "type": "integer",
          "example": 10
        },
        "offset": {
          "type": "integer",
          "example": 2
        },
        "order": {
          "type": "string",
          "example": "created desc"
        },
        "likeFilter": {
          "type": "string",
          "example": "fileName like \"test receipt\""
        },
        "filter": {
          "type": "string",
          "example": "status eq done or documentType eq invoice"
        }
      },
      "type": "object"
    },
    "PageText": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagesTextWord"
          }
        }
      },
      "type": "object"
    },
    "PagesTextWord": {
      "properties": {
        "word_boxes": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "..."
          }
        }
      },
      "type": "object"
    },
    "PagesText": {
      "properties": {
        "results": {
          "$ref": "#/definitions/PagesTextResults"
        }
      },
      "type": "object"
    },
    "PagesTextResults": {
      "properties": {
        "1": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagesTextWord"
          }
        },
        "2": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagesTextWord"
          }
        },
        "3": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PagesTextWord"
          }
        }
      },
      "type": "object"
    },
    "DocumentOptions": {
      "properties": {
        "extraction": {
          "type": "string",
          "example": "..."
        },
        "clientId": {
          "type": "string",
          "example": "c_00"
        },
        "documentType": {
          "type": "string",
          "example": "invoice"
        },
        "receivedDate": {
          "type": "string",
          "example": "2020-02-17"
        }
      },
      "type": "object"
    },
    "DocumentTemplateAssociations": {
      "properties": {
        "templateId": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff"
          }
        }
      },
      "type": "object"
    },
    "DeleteDataPayload": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Delete"
          }
        }
      },
      "type": "object"
    },
    "Delete": {
      "properties": {
        "id": {
          "type": "string",
          "example": "E0001"
        },
        "companyCode": {
          "type": "string",
          "example": "companyCode"
        },
        "system": {
          "type": "string",
          "example": "1234"
        }
      },
      "type": "object"
    },
    "BadRequestDataRetrieveFailedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E5"
        },
        "message": {
          "type": "string",
          "example": "Failed to retrieve data."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "GetData": {
      "properties": {
        "value": {
          "type": "array",
          "example": [
            {
              "id": "BE0001",
              "name": "A",
              "accountNumber": "12345",
              "address1": "A street 5",
              "address2": "",
              "city": "Heidelberg",
              "countryCode": "DE",
              "postalCode": "69117",
              "state": "BW",
              "email": "a@a.com",
              "phone": "",
              "bankAccount": "000001",
              "taxId": "999",
              "companyCode": "4711",
              "system": "System A"
            }
          ],
          "items": {
            "type": "string",
            "example": {
              "id": "BE0001",
              "name": "A",
              "accountNumber": "12345",
              "address1": "A street 5",
              "address2": "",
              "city": "Heidelberg",
              "countryCode": "DE",
              "postalCode": "69117",
              "state": "BW",
              "email": "a@a.com",
              "phone": "",
              "bankAccount": "000001",
              "taxId": "999",
              "companyCode": "4711",
              "system": "System A"
            }
          }
        }
      },
      "type": "object"
    },
    "BadRequestDataDeleteFailedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E51"
        },
        "message": {
          "type": "string",
          "example": "Failed to delete data."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "DeleteDataResponse": {
      "properties": {
        "deleted": {
          "type": "string",
          "example": "2"
        }
      },
      "type": "object"
    },
    "GetDataJob": {
      "properties": {
        "value": {
          "$ref": "#/definitions/GetDataJobPayload"
        }
      },
      "type": "object"
    },
    "GetDataJobPayload": {
      "properties": {
        "id": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175"
        },
        "status": {
          "type": "string",
          "example": "DONE"
        },
        "processedTime": {
          "type": "string",
          "example": "0:00:00.134951"
        },
        "refreshedAt": {
          "type": "string",
          "example": "2019-07-04T15:20:37.668873+00:00"
        }
      },
      "type": "object"
    },
    "DataPayload": {
      "properties": {
        "value": {
          "type": "array",
          "example": [
            {
              "id": "E0001",
              "email": "jane.doe@company.com",
              "firstName": "Jane",
              "lastName": "Doe"
            },
            {
              "id": "E0002",
              "email": "john.bob.doe@company.com",
              "firstName": "John",
              "middleName": "Bob",
              "lastName": "Doe"
            },
            {
              "id": "E0003",
              "email": "jane.doe@company.com",
              "firstName": "Jane",
              "lastName": "Doe",
              "system": "system",
              "companyCode": "4711"
            }
          ],
          "items": {
            "$ref": "#/definitions/Employee"
          }
        }
      },
      "type": "object"
    },
    "Employee": {
      "properties": {
        "id": {
          "type": "string",
          "example": "E0001",
          "maxLength": 128
        },
        "email": {
          "type": "string",
          "example": "foo@bar.com",
          "maxLength": 100
        },
        "firstName": {
          "type": "string",
          "example": "Foo",
          "maxLength": 100
        },
        "middleName": {
          "type": "string",
          "example": "M.",
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "example": "Bar",
          "maxLength": 100
        },
        "system": {
          "type": "string",
          "example": "system",
          "maxLength": 10
        },
        "companyCode": {
          "type": "string",
          "example": "4711",
          "maxLength": 4
        }
      },
      "type": "object"
    },
    "GetPendingDataPersistenceJobs": {
      "properties": {
        "value": {
          "$ref": "#/definitions/GetPendingDataPersistenceJobsPayload"
        }
      },
      "type": "object"
    },
    "GetPendingDataPersistenceJobsPayload": {
      "properties": {
        "id": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175"
        },
        "status": {
          "type": "string",
          "example": "PENDING"
        },
        "clientId": {
          "type": "string",
          "example": "c_00"
        },
        "created": {
          "type": "string",
          "example": "2019-07-04T15:20:37.668873+00:00"
        }
      },
      "type": "object"
    },
    "DataLimitExceededError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E87"
        },
        "message": {
          "type": "string",
          "example": "Limit per request exceeded."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "BadRequestDataPersistFailedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E53"
        },
        "message": {
          "type": "string",
          "example": "Failed to persist data."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "DeleteDataResult": {
      "properties": {
        "id": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175"
        },
        "status": {
          "type": "string",
          "example": "PENDING"
        }
      },
      "type": "object"
    },
    "PostDataResult": {
      "properties": {
        "totalDocumentCount": {
          "type": "integer",
          "default": 7
        },
        "job_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "ab67a0e4-f510-4882-b89f-a69090bf969f"
          }
        }
      },
      "type": "object"
    },
    "BadRequestPostActivationJobFailedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E144"
        },
        "message": {
          "type": "string",
          "example": "Data activation has been executed recently."
        },
        "details": {
          "type": "string",
          "example": "Next data activation possible in 45 minutes"
        }
      },
      "type": "object"
    },
    "PostDataActivationResult": {
      "properties": {
        "id": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175"
        },
        "status": {
          "type": "string",
          "example": "PENDING"
        }
      },
      "type": "object"
    },
    "BadRequestActivationJobRetrieveFailedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E5"
        },
        "message": {
          "type": "string",
          "example": "Failed to retrieve data."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "GetActivationJob": {
      "properties": {
        "value": {
          "$ref": "#/definitions/GetActivationJobPayload"
        }
      },
      "type": "object"
    },
    "GetActivationJobPayload": {
      "properties": {
        "id": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175"
        },
        "status": {
          "type": "string",
          "example": "DONE"
        },
        "processedTime": {
          "type": "string",
          "example": "0:01:00"
        },
        "created": {
          "type": "string",
          "example": "2019-07-04T15:20:37.668873+00:00"
        },
        "finished": {
          "type": "string",
          "example": "2019-07-04T15:21:37.668873+00:00"
        }
      },
      "type": "object"
    },
    "DeleteSchemas": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff"
          }
        }
      },
      "type": "object"
    },
    "SchemaCreation": {
      "properties": {
        "clientId": {
          "type": "string",
          "example": "c_00"
        },
        "name": {
          "type": "string",
          "example": "Custom_Payment_Advice_Schema"
        },
        "schemaDescription": {
          "type": "string",
          "example": "Schema For Accounts Department Payment Advices"
        },
        "documentType": {
          "type": "string",
          "example": "paymentAdvice"
        },
        "documentTypeDescription": {
          "type": "string",
          "example": "Payment Advice with Order Number"
        }
      },
      "type": "object"
    },
    "SchemaListed": {
      "properties": {
        "schemas": {
          "type": "array",
          "items": {
            "example": [
              {
                "name": "Basic Involve FormatSchema",
                "schemaDescription": "SAP Invoice Schema",
                "documentType": "Invoice",
                "documentTypeDescription": "Payment Advice with Order Number",
                "id": "484b6e1c-501c-4a07-85cb-84554656a175",
                "version": "1",
                "predefined": "True",
                "created": "2020-03-26T17:00:00.000000+00:00",
                "updated": "2020-04-26T17:00:00.000000+00:00",
                "state": "draft"
              },
              {
                "name": "Daimier Payment Advice Schema",
                "schemaDescription": "Payment Advice Schema",
                "documentType": "Payment Advice",
                "documentTypeDescription": "Payment Advice with Order Number",
                "id": "484b6e1c-501c-4a07-85cb-84554656a189",
                "version": "1",
                "predefined": "False",
                "created": "2020-03-26T17:00:00.000000+00:00",
                "updated": "2020-04-26T17:00:00.000000+00:00",
                "state": "active"
              }
            ],
            "allOf": [
              {
                "$ref": "#/definitions/SchemaAttributes"
              }
            ]
          }
        }
      },
      "type": "object"
    },
    "SchemaAttributes": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Basic Involve FormatSchema"
        },
        "schemaDescription": {
          "type": "string",
          "example": "SAP Invoice Schema"
        },
        "documentType": {
          "type": "string",
          "example": "Invoice"
        },
        "documentTypeDescription": {
          "type": "string",
          "example": "Payment Advice with Order Number"
        },
        "id": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175"
        },
        "created": {
          "type": "string",
          "format": "date",
          "example": "2020-03-26T17:00:00.000000+00:00"
        },
        "updated": {
          "type": "string",
          "format": "date",
          "example": "2020-04-26T17:00:00.000000+00:00"
        },
        "predefined": {
          "type": "boolean",
          "example": "True"
        },
        "state": {
          "type": "string",
          "example": "draft"
        }
      },
      "type": "object"
    },
    "DeleteSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Schemas deleted successfully."
        }
      },
      "type": "object"
    },
    "SchemaCreated": {
      "properties": {
        "id": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175"
        },
        "created": {
          "type": "string",
          "format": "date",
          "example": "2020-03-26T17:00:00.000000+00:00"
        }
      },
      "type": "object"
    },
    "Schemamodel": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Custom_Payment_Advice_Schema"
        },
        "schemaDescription": {
          "type": "string",
          "example": "Schema For Accounts Department Payment Advices"
        },
        "documentTypeDescription": {
          "type": "string",
          "example": "Payment Advice with Order Number"
        }
      },
      "type": "object"
    },
    "SchemaDetail": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Custom_Payment_Advice_Schema"
        },
        "schemaDescription": {
          "type": "string",
          "example": "Schema For Accounts Department Payment Advices"
        },
        "documentType": {
          "type": "string",
          "example": "paymentAdvice"
        },
        "documentTypeDescription": {
          "type": "string",
          "example": "Payment Advice with Order Number"
        },
        "id": {
          "type": "string",
          "example": "893bc685-9a00-43dd-baf4-32e5752b9a0c"
        },
        "predefined": {
          "type": "boolean",
          "example": "False"
        },
        "version": {
          "type": "string",
          "example": "1"
        },
        "created": {
          "type": "string",
          "format": "date",
          "example": "2024-02-26T03:52:50.773409+00:00"
        },
        "updated": {
          "type": "string",
          "format": "date",
          "example": "2024-02-26T03:52:50.773413+00:00"
        },
        "state": {
          "type": "string",
          "example": "active"
        },
        "headerFields": {
          "type": "array",
          "description": "Headerfields of a schema",
          "example": [
            {
              "name": "GrossAmountValue",
              "description": "TotalAmountValue",
              "defaultExtractor": {},
              "setupType": "static",
              "setupTypeVersion": "2.0.0",
              "label": "Gross Amount Value",
              "setup": {
                "type": "manual",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {
                "length": "64",
                "precision": "3",
                "decimalSeparator": ".",
                "thousandSeparator": ","
              },
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "sendersFullName",
              "description": "Name of Sender",
              "defaultExtractor": {
                "fieldName": "senderName"
              },
              "label": "Sender Full Name",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "setupTypeVersion": "2.0.0",
              "setupType": "static",
              "formattingType": "string",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "documentNumber",
              "description": "Document Number",
              "defaultExtractor": {},
              "setupType": "static",
              "setupTypeVersion": "2.0.0",
              "label": "Document Number",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "taxId",
              "description": "taxId",
              "defaultExtractor": {},
              "setupType": "static",
              "setupTypeVersion": "2.0.0",
              "label": "Tax Id",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "formattingType": "listOfValues",
              "formatting": {
                "values": [
                  {
                    "name": "CGST",
                    "label": "Central GST",
                    "description": "Central Goods and Service tax"
                  },
                  {
                    "name": "SGST",
                    "label": "State GST",
                    "description": "State Goods and Service tax"
                  }
                ]
              },
              "formattingTypeVersion": "1.0.0"
            }
          ],
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "lineItemFields": {
          "type": "array",
          "description": "Lineitems of a schema",
          "example": [
            {
              "name": "Amount",
              "description": "TotalAmountValue",
              "defaultExtractor": {},
              "setupType": "static",
              "label": "Amount",
              "setupTypeVersion": "2.0.0",
              "setup": {
                "type": "manual",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "discountAmount",
              "description": "Discount Amount",
              "defaultExtractor": {
                "fieldName": "discountAmount"
              },
              "setupType": "static",
              "label": "Discount Amount",
              "setupTypeVersion": "2.0.0",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            }
          ],
          "items": {
            "$ref": "#/definitions/Field"
          }
        }
      },
      "type": "object"
    },
    "Field": {
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 30
        },
        "description": {
          "type": "string",
          "maxLength": 100
        },
        "defaultExtractor": {
          "example": {
            "fieldName": "grossAmount"
          },
          "allOf": [
            {
              "$ref": "#/definitions/Defaultextractor"
            }
          ]
        },
        "setupType": {
          "type": "string"
        },
        "setupTypeVersion": {
          "type": "string"
        },
        "setup": {
          "example": {
            "x": 10,
            "y": 20,
            "w": 10,
            "z": 30
          },
          "allOf": [
            {
              "$ref": "#/definitions/MetadataCoordinates"
            }
          ]
        },
        "formatting": {
          "example": {
            "length": "64",
            "precision": "3",
            "decimalSeparator": ".",
            "thousandSeparator": ","
          },
          "allOf": [
            {
              "$ref": "#/definitions/Formatting"
            }
          ]
        },
        "formattingType": {
          "type": "string"
        },
        "formattingTypeVersion": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Defaultextractor": {
      "properties": {
        "fieldName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MetadataCoordinates": {
      "properties": {
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "w": {
          "type": "number"
        },
        "h": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "Formatting": {
      "properties": {
        "length": {
          "type": "string"
        },
        "precision": {
          "type": "string"
        },
        "decimalSeparator": {
          "type": "string"
        },
        "thousandSeparator": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Schema has been updated successfully."
        }
      },
      "type": "object"
    },
    "SchemaVersionCreated": {
      "properties": {
        "id": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175"
        },
        "version": {
          "type": "string",
          "example": "2"
        },
        "created": {
          "type": "string",
          "format": "date",
          "example": "2020-03-26T17:00:00.000000+00:00"
        }
      },
      "type": "object"
    },
    "SchemaCapabilities": {
      "properties": {
        "documentTypes": {
          "type": "array",
          "description": "Document types supported for Schemas",
          "example": [
            "invoice",
            "paymentAdvice",
            "purchaseOrder",
            "custom",
            "businessCard",
            "deliveryNote",
            "resume",
            "birthCertificate"
          ],
          "items": {
            "type": "string"
          }
        },
        "state": {
          "type": "array",
          "description": "States of Schemas",
          "example": [
            "active",
            "inactive",
            "draft"
          ],
          "items": {
            "type": "string"
          }
        },
        "setupTypes": {
          "description": "Format Supported with format properties for Schema",
          "example": [
            {
              "name": "static",
              "properties": []
            },
            {
              "name": "ml",
              "properties": [
                "x",
                "y",
                "w",
                "z"
              ]
            },
            {
              "name": "...",
              "properties": "[]"
            }
          ],
          "allOf": [
            {
              "$ref": "#/definitions/SingleFormat"
            }
          ]
        },
        "formatting": {
          "description": "Format Supported with format properties for Schema",
          "example": [
            {
              "name": "string",
              "properties": [
                {
                  "SCHEMA_FORMAT_NAME": "length",
                  "values": [
                    "number"
                  ]
                }
              ]
            },
            {
              "name": "number",
              "properties": [
                {
                  "name": "length",
                  "values": [
                    "number"
                  ]
                },
                {
                  "name": "thousandSeparator",
                  "values": [
                    ".",
                    ",",
                    " "
                  ]
                },
                {
                  "name": "decimalSeparator",
                  "values": [
                    ".",
                    ",",
                    " "
                  ]
                }
              ]
            },
            {
              "name": "...",
              "properties": "[]"
            }
          ],
          "allOf": [
            {
              "$ref": "#/definitions/SingleFormat1"
            }
          ]
        }
      },
      "type": "object"
    },
    "SingleFormat": {
      "properties": {
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "example": [
            "length",
            "thousandseperator"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "SingleFormat1": {
      "properties": {
        "name": {
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/SingleFormatProperty"
        }
      },
      "type": "object"
    },
    "SingleFormatProperty": {
      "properties": {
        "name": {
          "type": "string",
          "example": "dateformat"
        },
        "values": {
          "type": "array",
          "example": [
            "dd/mm/yy",
            "mm/dd/yy",
            "yy/dd/mm"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "DeleteVersion": {
      "properties": {
        "version": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "5"
          }
        }
      },
      "type": "object"
    },
    "SchemaVersionListed": {
      "properties": {
        "schemas": {
          "type": "array",
          "items": {
            "example": [
              {
                "name": "Basic Involve FormatSchema",
                "schemaDescription": "SAP Invoice Schema",
                "documentType": "Invoice",
                "documentTypeDescription": "Payment Advice with Order Number",
                "id": "484b6e1c-501c-4a07-85cb-84554656a175",
                "version": "1",
                "predefined": "True",
                "created": "2020-03-26T17:00:00.000000+00:00",
                "updated": "2020-04-26T17:00:00.000000+00:00",
                "state": "draft"
              },
              {
                "name": "Basic Involve FormatSchema",
                "schemaDescription": "SAP Invoice Schema",
                "documentType": "Invoice",
                "documentTypeDescription": "Payment Advice with Order Number",
                "id": "484b6e1c-501c-4a07-85cb-84554656a175",
                "version": "2",
                "predefined": "True",
                "created": "2020-03-26T17:00:00.000000+00:00",
                "updated": "2020-04-26T17:00:00.000000+00:00",
                "state": "draft"
              }
            ],
            "allOf": [
              {
                "$ref": "#/definitions/SchemaAttributes"
              }
            ]
          }
        }
      },
      "type": "object"
    },
    "DeleteSchemaVersion": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Schema versions deleted successfully."
        }
      },
      "type": "object"
    },
    "SchemaVersionDetail": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Custom_Payment_Advice_Schema"
        },
        "schemaDescription": {
          "type": "string",
          "example": "Schema For Accounts Department Payment Advices"
        },
        "documentType": {
          "type": "string",
          "example": "paymentAdvice"
        },
        "documentTypeDescription": {
          "type": "string",
          "example": "Payment Advice with Order Number"
        },
        "id": {
          "type": "string",
          "example": "893bc685-9a00-43dd-baf4-32e5752b9a0c"
        },
        "predefined": {
          "type": "boolean",
          "example": "False"
        },
        "version": {
          "type": "string",
          "example": "2"
        },
        "created": {
          "type": "string",
          "format": "date",
          "example": "2024-02-26T03:52:50.773409+00:00"
        },
        "updated": {
          "type": "string",
          "format": "date",
          "example": "2024-02-26T03:52:50.773413+00:00"
        },
        "state": {
          "type": "string",
          "example": "active"
        },
        "headerFields": {
          "type": "array",
          "description": "Headerfields of a schema",
          "example": [
            {
              "name": "GrossAmountValue",
              "description": "TotalAmountValue",
              "defaultExtractor": {},
              "setupType": "static",
              "setupTypeVersion": "2.0.0",
              "label": "Gross Amount Value",
              "setup": {
                "type": "manual",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {
                "length": "64",
                "precision": "3",
                "decimalSeparator": ".",
                "thousandSeparator": ","
              },
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "sendersFullName",
              "description": "Name of Sender",
              "defaultExtractor": {
                "fieldName": "senderName"
              },
              "label": "Sender Full Name",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "setupTypeVersion": "2.0.0",
              "setupType": "static",
              "formattingType": "string",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "documentNumber",
              "description": "Document Number",
              "defaultExtractor": {},
              "setupType": "static",
              "setupTypeVersion": "2.0.0",
              "label": "Document Number",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "taxId",
              "description": "taxId",
              "defaultExtractor": {},
              "setupType": "static",
              "setupTypeVersion": "2.0.0",
              "label": "Tax Id",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "formattingType": "listOfValues",
              "formatting": {
                "values": [
                  {
                    "name": "CGST",
                    "label": "Central GST",
                    "description": "Central Goods and Service tax"
                  },
                  {
                    "name": "SGST",
                    "label": "State GST",
                    "description": "State Goods and Service tax"
                  }
                ]
              },
              "formattingTypeVersion": "1.0.0"
            }
          ],
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "lineItemFields": {
          "type": "array",
          "description": "Lineitems of a schema",
          "example": [
            {
              "name": "Amount",
              "description": "TotalAmountValue",
              "defaultExtractor": {},
              "setupType": "static",
              "label": "Amount",
              "setupTypeVersion": "2.0.0",
              "setup": {
                "type": "manual",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "discountAmount",
              "description": "Discount Amount",
              "defaultExtractor": {
                "fieldName": "discountAmount"
              },
              "setupType": "static",
              "label": "Discount Amount",
              "setupTypeVersion": "2.0.0",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            }
          ],
          "items": {
            "$ref": "#/definitions/Field"
          }
        }
      },
      "type": "object"
    },
    "SchemaFields": {
      "properties": {
        "headerFields": {
          "type": "array",
          "description": "Headerfields of a schema",
          "example": [
            {
              "name": "GrossAmountValue",
              "description": "TotalAmountValue",
              "defaultExtractor": {},
              "setupType": "static",
              "setupTypeVersion": "2.0.0",
              "label": "Gross Amount Value",
              "setup": {
                "type": "manual",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {
                "length": "64",
                "precision": "3",
                "decimalSeparator": ".",
                "thousandSeparator": ","
              },
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "sendersFullName",
              "description": "Name of Sender",
              "defaultExtractor": {
                "fieldName": "senderName"
              },
              "label": "Sender Full Name",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "setupTypeVersion": "2.0.0",
              "setupType": "static",
              "formattingType": "string",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "documentNumber",
              "description": "Document Number",
              "defaultExtractor": {},
              "setupType": "static",
              "setupTypeVersion": "2.0.0",
              "label": "Document Number",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "taxId",
              "description": "taxId",
              "defaultExtractor": {},
              "setupType": "static",
              "setupTypeVersion": "2.0.0",
              "label": "Tax Id",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "formattingType": "listOfValues",
              "formatting": {
                "values": [
                  {
                    "name": "CGST",
                    "label": "Central GST",
                    "description": "Central Goods and Service tax"
                  },
                  {
                    "name": "SGST",
                    "label": "State GST",
                    "description": "State Goods and Service tax"
                  }
                ]
              },
              "formattingTypeVersion": "1.0.0"
            }
          ],
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "lineItemFields": {
          "type": "array",
          "description": "Lineitems of a schema",
          "example": [
            {
              "name": "Amount",
              "description": "TotalAmountValue",
              "defaultExtractor": {},
              "setupType": "static",
              "label": "Amount",
              "setupTypeVersion": "2.0.0",
              "setup": {
                "type": "manual",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            },
            {
              "name": "discountAmount",
              "description": "Discount Amount",
              "defaultExtractor": {
                "fieldName": "discountAmount"
              },
              "setupType": "static",
              "label": "Discount Amount",
              "setupTypeVersion": "2.0.0",
              "setup": {
                "type": "auto",
                "priority": 1
              },
              "formattingType": "number",
              "formatting": {},
              "formattingTypeVersion": "1.0.0"
            }
          ],
          "items": {
            "$ref": "#/definitions/Field"
          }
        }
      },
      "type": "object"
    },
    "FieldsSchemaVersion": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Schema fields have been uploaded successfully."
        }
      },
      "type": "object"
    },
    "ActivateSchemaVersion": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Schema version activated successfully."
        }
      },
      "type": "object"
    },
    "DeactivateSchemaVersion": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Schema version deactivated successfully."
        }
      },
      "type": "object"
    },
    "TemplateActivateActionResponseV2": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Successfully activated the template"
        }
      },
      "type": "object"
    },
    "TemplateDeActivateActionResponseV2": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Successfully deactivated the template"
        }
      },
      "type": "object"
    },
    "MetaDataFields": {
      "properties": {
        "metadata": {
          "type": "array",
          "example": [
            {
              "name": "name",
              "value": "value",
              "extraction": "template",
              "isLineItemField": "false"
            },
            {
              "name": "name",
              "value": null,
              "extraction": "schema",
              "isLineItemField": "true"
            }
          ],
          "items": {
            "$ref": "#/definitions/Key-value pair"
          }
        }
      },
      "type": "object"
    },
    "Key-value pair": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "extraction": {
          "type": "string"
        },
        "isLineItemField": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TemplatePostMetadataResponse": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "e0ec84e3-49b0-4b08-aa7f-8d696472c248",
          "maxLength": 36
        }
      },
      "type": "object"
    },
    "PostTemplatePayload_v2": {
      "required": [
        "clientId",
        "name",
        "schemaId"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "86930543-0f21-4426-a2d8-ef6064cee64c",
          "maxLength": 36
        },
        "name": {
          "type": "string",
          "example": "Test_Template",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "example": "Test description",
          "maxLength": 100
        },
        "clientId": {
          "type": "string",
          "example": "c_00",
          "maxLength": 128
        },
        "schemaId": {
          "type": "string",
          "example": "86930543-0f21-4426-a2d8-ef6064cee64c",
          "maxLength": 36
        },
        "schemaVersion": {
          "type": "string",
          "example": "1"
        }
      },
      "type": "object"
    },
    "BadRequestTemplateGetErrorError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E31"
        },
        "message": {
          "type": "string",
          "example": "Template not found."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "GetTemplateV2": {
      "properties": {
        "results": {
          "type": "array",
          "example": [
            {
              "id": "5fb6279a-1bb9-4e37-b3bc-95ffb0e3d220",
              "schemaId": "4e8ebdd3-d2ab-40a6-b3ae-f528506de431",
              "name": "Test Template",
              "description": "Test Description",
              "language": "en",
              "documentType": "invoice",
              "clientId": "c_00",
              "status": "NO_SAMPLES",
              "isActive": true,
              "creationDate": "2024-07-02T12:08:11.664728+00:00",
              "lastUpdatedDate": "2024-07-02T12:08:11.664728+00:00",
              "documentAssociations": [
                {
                  "id": "sample_id"
                }
              ],
              "extraction": {
                "headerFields": [
                  {
                    "name": "documentNumber",
                    "label": "Document Number:",
                    "type": "number"
                  }
                ]
              }
            },
            {
              "id": "1213723c-bdff-4b2a-b821-93f051966b0c",
              "schemaId": "8143a974-5501-49f4-848f-567231fbf228",
              "name": "Test Template 2",
              "description": "Test Description 2",
              "language": "en",
              "documentType": "invoice",
              "clientId": "c_00",
              "status": "NO_SAMPLES",
              "isActive": false,
              "creationDate": "2024-07-02T12:08:11.664728+00:00",
              "documentAssociations": [
                {
                  "id": "sample_id"
                }
              ],
              "extraction": {
                "headerFields": [
                  {
                    "name": "documentNumber",
                    "type": "number"
                  }
                ]
              }
            }
          ],
          "items": {
            "description": "List of templates",
            "allOf": [
              {
                "$ref": "#/definitions/GetTemplateResult"
              }
            ]
          }
        }
      },
      "type": "object"
    },
    "GetTemplateResult": {
      "properties": {
        "id": {
          "type": "string"
        },
        "schemaId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "documentType": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "creationDate": {
          "type": "string",
          "format": "date"
        },
        "lastUpdatedDate": {
          "type": "string",
          "format": "date"
        },
        "schemaName": {
          "type": "string"
        },
        "documentAssociations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetDocumentIds"
          }
        },
        "extraction": {
          "$ref": "#/definitions/GetExtractionField"
        }
      },
      "type": "object"
    },
    "GetDocumentIds": {
      "properties": {
        "id": {
          "type": "string",
          "example": "7dc93514-bbff-428f-8c49-d07ce3aabbdb"
        }
      },
      "type": "object"
    },
    "GetExtractionField": {
      "properties": {
        "headerFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetHeaderFields"
          }
        },
        "lineItemFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetLineItemFields"
          }
        }
      },
      "type": "object"
    },
    "GetHeaderFields": {
      "properties": {
        "name": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetLineItemFields": {
      "properties": {
        "name": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BadRequestTemplateNotCreatedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E27"
        },
        "message": {
          "type": "string",
          "example": "Could not create template."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "PostTemplateResponse": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "aa0fa4bf-cc50-4031-8fc1-f1fb6b65b6bf",
          "maxLength": 36
        }
      },
      "type": "object"
    },
    "DeleteAddedDocumentResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Successfully removed document from the template."
        }
      },
      "type": "object"
    },
    "DocumentAddResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Successfully added document to the template."
        }
      },
      "type": "object"
    },
    "GetTemplateDetails_V2": {
      "properties": {
        "id": {
          "type": "string",
          "example": "86930543-0f21-4426-a2d8-ef6064cee64c"
        },
        "schemaId": {
          "type": "string",
          "example": "e8998fe1-1f6b-40d3-850d-8c21ff6397a5"
        },
        "name": {
          "type": "string",
          "example": "Test Template"
        },
        "description": {
          "type": "string",
          "example": "Test Template Description"
        },
        "language": {
          "type": "string",
          "example": "en"
        },
        "documentType": {
          "type": "string",
          "example": "invoice"
        },
        "clientId": {
          "type": "string",
          "example": "c_00"
        },
        "status": {
          "type": "string",
          "example": "NO_SAMPLES"
        },
        "isActive": {
          "type": "boolean",
          "example": true
        },
        "creationDate": {
          "type": "string",
          "format": "date"
        },
        "lastUpdatedDate": {
          "type": "string",
          "format": "date",
          "example": "2024-07-02T12:08:11.664728+00:00"
        },
        "schemaName": {
          "type": "string",
          "example": "SAP_Schema"
        },
        "documentAssociations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetDocumentIds"
          }
        },
        "extraction": {
          "$ref": "#/definitions/GetExtractionField"
        }
      },
      "type": "object"
    },
    "DeleteTemplateV2": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Successfully deleted 1 template."
        }
      },
      "type": "object"
    },
    "PageDimensions": {
      "properties": {
        "width": {
          "type": "integer",
          "example": 1200
        },
        "height": {
          "type": "integer",
          "example": 2460
        }
      },
      "type": "object"
    },
    "PagesDimensionsResults": {
      "properties": {
        "1": {
          "$ref": "#/definitions/PageDimensions"
        },
        "2": {
          "$ref": "#/definitions/PageDimensions"
        },
        "3": {
          "$ref": "#/definitions/PageDimensions"
        }
      },
      "type": "object"
    },
    "PagesDimensions": {
      "properties": {
        "results": {
          "$ref": "#/definitions/PagesDimensionsResults"
        }
      },
      "type": "object"
    },
    "DocumentIdInReview": {
      "properties": {
        "status": {
          "type": "string",
          "example": "DONE"
        },
        "message": {
          "type": "string",
          "example": "Document marked for review."
        }
      },
      "type": "object"
    },
    "DocumentIdReviewed": {
      "properties": {
        "status": {
          "type": "string",
          "example": "DONE"
        },
        "message": {
          "type": "string",
          "example": "Document marked as reviewed."
        }
      },
      "type": "object"
    },
    "provider subaccount": {
      "properties": {
        "subaccount_id": {
          "type": "string",
          "example": "<subaccount_id>"
        }
      },
      "type": "object"
    },
    "sbf context": {
      "properties": {
        "instance_name": {
          "type": "string",
          "example": "<instance_name>"
        },
        "provider": {
          "$ref": "#/definitions/provider subaccount"
        }
      },
      "type": "object"
    },
    "user parameters": {
      "properties": {
        "cmk-support": {
          "type": "boolean",
          "example": false
        }
      },
      "type": "object"
    },
    "tenantEventRequest": {
      "required": [
        "global_account_id",
        "instance_id",
        "plan_id",
        "plan_name",
        "subaccount_id",
        "zone_id"
      ],
      "properties": {
        "global_account_id": {
          "type": "string",
          "example": "<global_account_id>"
        },
        "zone_id": {
          "type": "string",
          "example": "<zone_id>"
        },
        "instance_id": {
          "type": "string",
          "example": "<instance_id>"
        },
        "subaccount_id": {
          "type": "string",
          "example": "<subaccount_id>"
        },
        "plan_name": {
          "type": "string",
          "example": "<plan_name>",
          "maxLength": 30
        },
        "plan_id": {
          "type": "string",
          "example": "<plan_id>",
          "maxLength": 36
        },
        "context": {
          "$ref": "#/definitions/sbf context"
        },
        "parameters": {
          "$ref": "#/definitions/user parameters"
        }
      },
      "type": "object"
    },
    "tenantDeleteRequest": {
      "required": [
        "instance_id",
        "plan_id",
        "plan_name",
        "subaccount_id",
        "zone_id"
      ],
      "properties": {
        "zone_id": {
          "type": "string",
          "example": "<zone_id>"
        },
        "instance_id": {
          "type": "string",
          "example": "<instance_id>"
        },
        "subaccount_id": {
          "type": "string",
          "example": "<subaccount_id>"
        },
        "plan_name": {
          "type": "string",
          "example": "<plan_name>",
          "maxLength": 30
        },
        "plan_id": {
          "type": "string",
          "example": "<plan_id>",
          "maxLength": 36
        }
      },
      "type": "object"
    },
    "tenantUpdateRequest": {
      "required": [
        "global_account_id",
        "instance_id",
        "plan_id",
        "plan_name",
        "subaccount_id",
        "zone_id"
      ],
      "properties": {
        "global_account_id": {
          "type": "string",
          "example": "<global_account_id>"
        },
        "zone_id": {
          "type": "string",
          "example": "<zone_id>"
        },
        "instance_id": {
          "type": "string",
          "example": "<instance_id>"
        },
        "subaccount_id": {
          "type": "string",
          "example": "<subaccount_id>"
        },
        "plan_name": {
          "type": "string",
          "example": "<plan_name>",
          "maxLength": 30
        },
        "plan_id": {
          "type": "string",
          "example": "<plan_id>",
          "maxLength": 36
        }
      },
      "type": "object"
    },
    "tenantStatusRequest": {
      "required": [
        "instance_id",
        "operation_name",
        "subaccount_id",
        "zone_id"
      ],
      "properties": {
        "zone_id": {
          "type": "string",
          "example": "<zone_id>"
        },
        "instance_id": {
          "type": "string",
          "example": "<instance_id>"
        },
        "subaccount_id": {
          "type": "string",
          "example": "<subaccount_id>"
        },
        "operation_name": {
          "type": "string",
          "example": "provisioning"
        }
      },
      "type": "object"
    },
    "Instance": {
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "sample_instance_id",
          "maxLength": 36
        },
        "name": {
          "type": "string",
          "example": "sample_instance_id",
          "maxLength": 100
        }
      },
      "type": "object"
    },
    "BadRequestDataExportFailedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E5"
        },
        "message": {
          "type": "string",
          "example": "Failed to retrieve data."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "BadRequestExportJobRetrieveFailedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E5"
        },
        "message": {
          "type": "string",
          "example": "Failed to retrieve data."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "PostExportJobPayload": {
      "properties": {
        "tenantIds": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "1234"
          }
        },
        "startDate": {
          "type": "string",
          "example": "2022-01-01"
        },
        "endDate": {
          "type": "string",
          "example": "2022-01-31"
        }
      },
      "type": "object"
    },
    "ListedDataExportJobs": {
      "properties": {
        "status": {
          "type": "string",
          "example": "DONE"
        },
        "id": {
          "type": "string",
          "example": "c1673dee-56d6-4960-9a36-c29529f04b4a"
        },
        "created": {
          "type": "string",
          "format": "date",
          "example": "2020-03-26 17:00:00.000000+00:00"
        },
        "finished": {
          "type": "string",
          "format": "date",
          "example": "2020-03-26 17:02:00.000000+00:00"
        },
        "processedTime": {
          "type": "string",
          "example": "0:00:00.134951"
        },
        "tenantIds": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "ab67a0e4-f510-4882-b89f-a69090bf969f"
          }
        }
      },
      "type": "object"
    },
    "GetDataExportJobsResult": {
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "description": "List of data export jobs",
            "example": [
              {
                "status": "DONE",
                "id": "484b6e1c-501c-4a07-85cb-84554656a175",
                "created": "2019-07-04T15:20:37.668873+00:00",
                "finished": "2019-07-04T15:21:37.668873+00:00",
                "processedTime": "0:01:00",
                "tenantIds": [
                  "ab67a0e4-f510-4882-b89f-a69090bf969f"
                ]
              },
              {
                "status": "PENDING",
                "id": "484b6e1c-501c-4a07-85cb-84554656a175",
                "created": "2019-07-04T15:20:37.668873+00:00",
                "finished": "",
                "processedTime": "",
                "tenantIds": [
                  "ab67a0e4-f510-4882-b89f-a69090bf969f",
                  "cd64a1e4-j091-0938-b89f-a30980bf029h"
                ]
              }
            ],
            "allOf": [
              {
                "$ref": "#/definitions/ListedDataExportJobs"
              }
            ]
          }
        }
      },
      "type": "object"
    },
    "DataExportJobExportedTenants": {
      "properties": {
        "ab67a0e4-f510-4882-b89f-a69090bf969f": {
          "type": "integer",
          "example": 12
        },
        "cd64a1e4-j091-0938-b89f-a30980bf029h": {
          "type": "integer",
          "example": 10
        }
      },
      "type": "object"
    },
    "DataExportJobExportedDocs": {
      "properties": {
        "totalDocuments": {
          "type": "integer",
          "example": 22
        },
        "tenantIds": {
          "$ref": "#/definitions/DataExportJobExportedTenants"
        }
      },
      "type": "object"
    },
    "DataExportJobPayload": {
      "properties": {
        "status": {
          "type": "string",
          "example": "DONE"
        },
        "id": {
          "type": "string",
          "example": "c1673dee-56d6-4960-9a36-c29529f04b4a"
        },
        "created": {
          "type": "string",
          "format": "date",
          "example": "2020-03-26 17:00:00.000000+00:00"
        },
        "finished": {
          "type": "string",
          "format": "date",
          "example": "2020-03-26 17:02:00.000000+00:00"
        },
        "processedTime": {
          "type": "string",
          "example": "0:00:00.134951"
        },
        "exportedDocuments": {
          "$ref": "#/definitions/DataExportJobExportedDocs"
        }
      },
      "type": "object"
    },
    "GetDataExportJob": {
      "properties": {
        "value": {
          "$ref": "#/definitions/DataExportJobPayload"
        }
      },
      "type": "object"
    },
    "UpdateTrainingState": {
      "properties": {
        "tenantId": {
          "type": "string",
          "example": "c1673dee-56d6-4960-9a36-c29529f04b4a"
        },
        "documents": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "ab67a0e4-f510-4882-b89f-a69090bf969f"
          }
        }
      },
      "type": "object"
    },
    "ocr": {
      "properties": {
        "ocr_engine": {
          "type": "string",
          "example": "scene_text_recognition"
        }
      },
      "type": "object"
    },
    "settings": {
      "properties": {
        "ocr": {
          "example": {
            "ocr_engine": "scene_text_recognition"
          },
          "allOf": [
            {
              "$ref": "#/definitions/ocr"
            }
          ]
        }
      },
      "type": "object"
    },
    "SchemaUpdation": {
      "properties": {
        "name": {
          "type": "string",
          "example": "Custom_Payment_Advice_Schema"
        },
        "schemaDescription": {
          "type": "string",
          "example": "Schema For Accounts Department Payment Advices"
        },
        "documentTypeDescription": {
          "type": "string",
          "example": "Payment Advice with Order Number"
        }
      },
      "type": "object"
    },
    "ActivateSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Schema activated successfully."
        }
      },
      "type": "object"
    },
    "DeactivateSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Schema deactivated successfully."
        }
      },
      "type": "object"
    },
    "FieldsSchema": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Schema fields have been uploaded successfully."
        }
      },
      "type": "object"
    },
    "SchemaCategory": {
      "properties": {
        "name": {
          "type": "string",
          "example": "ShipmentAddress"
        },
        "description": {
          "type": "string",
          "example": "Shipment Address details"
        },
        "label": {
          "type": "string",
          "example": "Shipment Address"
        }
      },
      "type": "object"
    },
    "SchemaCategoryUpdateResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Schema Category has been updated successfully."
        }
      },
      "type": "object"
    },
    "SchemaCategoryDeleteResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Schema Categories has been deleted successfully."
        }
      },
      "type": "object"
    },
    "SchemaCategoryModel": {
      "properties": {
        "name": {
          "type": "string",
          "example": "ShipmentAddress"
        },
        "description": {
          "type": "string",
          "example": "Shipment Address details"
        },
        "label": {
          "type": "string",
          "example": "Shipment Address"
        }
      },
      "type": "object"
    },
    "SchemaCategoryUpdate": {
      "properties": {
        "name": {
          "type": "string",
          "example": "ShipmentAddress"
        },
        "description": {
          "type": "string",
          "example": "Shipment Address details"
        },
        "label": {
          "type": "string",
          "example": "Shipment Address"
        }
      },
      "type": "object"
    },
    "SchemaCategoryBulkCreationModel": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "description": "Category details",
            "example": {
              "name": "ShipmentAddress",
              "description": "Shipment Address details",
              "label": "Shipment Address"
            },
            "allOf": [
              {
                "$ref": "#/definitions/SchemaCategoryModel"
              }
            ]
          }
        }
      },
      "type": "object"
    },
    "SchemaCategoryCreated": {
      "properties": {
        "inserted": {
          "type": "string",
          "example": "1"
        }
      },
      "type": "object"
    },
    "DeleteSchemaCategory": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "senderName, ShipmentAddress"
          }
        }
      },
      "type": "object"
    },
    "SingleMetadata": {
      "properties": {
        "name": {
          "type": "string",
          "example": "ml"
        },
        "properties": {
          "type": "array",
          "example": [
            "x",
            "y",
            "w",
            "z"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "PostTemplatePayload": {
      "required": [
        "clientId",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "7cb792b9-e470-4c37-ba1d-1164c6ecc577",
          "maxLength": 36
        },
        "name": {
          "type": "string",
          "example": "Test_Template",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "example": "Test description",
          "maxLength": 100
        },
        "clientId": {
          "type": "string",
          "example": "c_00",
          "maxLength": 128
        }
      },
      "type": "object"
    },
    "DeleteTemplatePayload": {
      "required": [
        "clientId"
      ],
      "properties": {
        "value": {
          "type": "array",
          "minItems": 0,
          "maxItems": 100,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "example": "4da67643-4d0a-4cf6-8fde-0aaf15fe83a0"
          }
        },
        "clientId": {
          "type": "string",
          "example": "c_00"
        }
      },
      "type": "object"
    },
    "DeleteTemplate": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Successfully deleted 1 template."
        }
      },
      "type": "object"
    },
    "GetTemplate": {
      "properties": {
        "results": {
          "type": "array",
          "example": [
            {
              "id": "5fb6279a-1bb9-4e37-b3bc-95ffb0e3d220",
              "schemaId": "d7b900d4-7568-420d-98a4-e0f3c4a0636a",
              "name": "Test Template",
              "description": "Test Description",
              "language": "en",
              "documentType": "invoice",
              "clientId": "c_00",
              "status": "NO_SAMPLES",
              "isActive": true,
              "creationDate": "2024-07-02T12:08:11.663815+00:00",
              "lastUpdatedDate": "2024-07-02T12:08:11.663815+00:00",
              "extraction": {
                "headerFields": [
                  {
                    "name": "documentNumber",
                    "label": "Document Number:",
                    "type": "number"
                  }
                ]
              }
            },
            {
              "id": "1213723c-bdff-4b2a-b821-93f051966b0c",
              "schemaId": "9975a827-a161-4a2c-8385-8fb1b419c7a2",
              "name": "Test Template 2",
              "description": "Test Description 2",
              "language": "en",
              "documentType": "invoice",
              "clientId": "c_00",
              "status": "NO_SAMPLES",
              "isActive": false,
              "creationDate": "2024-07-02T12:08:11.663815+00:00",
              "extraction": {
                "headerFields": [
                  {
                    "name": "documentNumber",
                    "type": "number"
                  }
                ]
              }
            }
          ],
          "items": {
            "description": "List of templates",
            "allOf": [
              {
                "$ref": "#/definitions/GetTemplateResult"
              }
            ]
          }
        }
      },
      "type": "object"
    },
    "GetTemplateDetails": {
      "properties": {
        "id": {
          "type": "string",
          "example": "7cb792b9-e470-4c37-ba1d-1164c6ecc577"
        },
        "schemaId": {
          "type": "string",
          "example": "4673cc43-c9f6-46e5-8299-8e9bed43d131"
        },
        "name": {
          "type": "string",
          "example": "Test Template"
        },
        "description": {
          "type": "string",
          "example": "Test Template Description"
        },
        "language": {
          "type": "string",
          "example": "en"
        },
        "documentType": {
          "type": "string",
          "example": "invoice"
        },
        "clientId": {
          "type": "string",
          "example": "c_00"
        },
        "status": {
          "type": "string",
          "example": "NO_SAMPLES"
        },
        "isActive": {
          "type": "boolean",
          "example": true
        },
        "creationDate": {
          "type": "string",
          "format": "date"
        },
        "lastUpdatedDate": {
          "type": "string",
          "format": "date",
          "example": "2024-07-02T12:08:11.663815+00:00"
        },
        "schemaName": {
          "type": "string",
          "example": "SAP_Schema"
        },
        "extraction": {
          "$ref": "#/definitions/GetExtractionField"
        }
      },
      "type": "object"
    },
    "SampleDocumentMapping": {
      "required": [
        "sampleDocumentId",
        "templateId"
      ],
      "properties": {
        "templateId": {
          "type": "string",
          "example": "Template UUID",
          "maxLength": 36
        },
        "sampleDocumentId": {
          "type": "string",
          "example": "Sample Document UUID",
          "maxLength": 36
        }
      },
      "type": "object"
    },
    "SampleSatusModel": {
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175",
          "maxLength": 36
        },
        "status": {
          "type": "string",
          "example": "DONE"
        }
      },
      "type": "object"
    },
    "SampleDocumentList": {
      "required": [
        "templateId"
      ],
      "properties": {
        "templateId": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175",
          "maxLength": 36
        },
        "sampleDocuments": {
          "type": "array",
          "example": [
            {
              "id": "484b6e1c-501c-4a07-85cb-84554656a175",
              "status": "DONE"
            }
          ],
          "items": {
            "$ref": "#/definitions/SampleSatusModel"
          }
        }
      },
      "type": "object"
    },
    "SampleDocumentAnnotation": {
      "properties": {
        "name": {
          "type": "string",
          "example": "documentNumber",
          "maxLength": 100
        },
        "value": {
          "type": "string",
          "example": "12342"
        },
        "coordinates": {
          "example": {
            "x": 0.700392156862745,
            "y": 0.0875757575757576,
            "w": 0.084313725490196,
            "h": 0.00878787878787879
          },
          "allOf": [
            {
              "$ref": "#/definitions/FieldCoordinates"
            }
          ]
        },
        "page": {
          "type": "string",
          "example": 1
        }
      },
      "type": "object"
    },
    "SampleDocumentAnnotations": {
      "properties": {
        "headerFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SampleDocumentAnnotation"
          }
        },
        "lineItems": {
          "type": "array",
          "example": [
            [
              {
                "name": "description",
                "value": "Description",
                "page": 1,
                "coordinates": {
                  "x": 0.29921568627451,
                  "y": 0.655151515151515,
                  "w": 0.0729411764705882,
                  "h": 0.00909090909090904
                }
              },
              {
                "name": "netAmount",
                "value": "Amount",
                "page": 1,
                "coordinates": {
                  "x": 0.867058823529412,
                  "y": 0.655151515151515,
                  "w": 0.0729411764705882,
                  "h": 0.00909090909090904
                }
              }
            ],
            [
              {
                "name": "description",
                "value": "Description2",
                "page": 1,
                "coordinates": {
                  "x": 0.29921568627451,
                  "y": 0.655151515151515,
                  "w": 0.0729411764705882,
                  "h": 0.00909090909090904
                }
              },
              {
                "name": "netAmount",
                "value": "Amount2",
                "page": 1,
                "coordinates": {
                  "x": 0.867058823529412,
                  "y": 0.655151515151515,
                  "w": 0.0729411764705882,
                  "h": 0.00909090909090904
                }
              }
            ]
          ],
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SampleDocumentAnnotation"
            }
          }
        }
      },
      "type": "object"
    },
    "SampleDocument": {
      "required": [
        "sampleDocumentId",
        "templateId"
      ],
      "properties": {
        "templateId": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175",
          "maxLength": 36
        },
        "sampleDocumentId": {
          "type": "string",
          "example": "484b6e1c-501c-4a07-85cb-84554656a175",
          "maxLength": 36
        },
        "annotations": {
          "$ref": "#/definitions/SampleDocumentAnnotations"
        }
      },
      "type": "object"
    },
    "SampleDocumentDetailsResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Successfully added annotations"
        }
      },
      "type": "object"
    },
    "TemplateActivateActionResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Successfully activated the template"
        }
      },
      "type": "object"
    },
    "TemplateDeActivateActionResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Successfully deactivated the template"
        }
      },
      "type": "object"
    },
    "SampleDocumentAnnotationList": {
      "properties": {
        "annotations": {
          "$ref": "#/definitions/SampleDocumentAnnotations"
        }
      },
      "type": "object"
    },
    "BadRequestTemplateFieldsGetErrorError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E32"
        },
        "message": {
          "type": "string",
          "example": "Template fields not found."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "GetTemplateFieldsResult": {
      "properties": {
        "templateId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetTemplateFields": {
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "description": "List of templates fields",
            "example": {
              "results": [
                {
                  "id": "c4699383-2455-44ed-81c3-d34709fcb03c",
                  "templateId": "fc8db7ba-fd13-4943-b2b8-b608161357ac",
                  "name": "taxAmount"
                },
                {
                  "id": "0aa6afe8-ab21-4a7e-8053-9c3c7b1169d9",
                  "templateId": "3bd15e9a-82c8-4d4b-9d2d-51a2c4e2f455",
                  "name": "grossAmount",
                  "label": "amount"
                }
              ]
            },
            "allOf": [
              {
                "$ref": "#/definitions/GetTemplateFieldsResult"
              }
            ]
          }
        }
      },
      "type": "object"
    },
    "DeleteTemplateFields": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Successfully deleted template field(s)."
        }
      },
      "type": "object"
    },
    "PostHeaderFields": {
      "required": [
        "name"
      ],
      "properties": {
        "templateId": {
          "type": "string",
          "example": "Template_UUID1",
          "maxLength": 36
        },
        "name": {
          "type": "string",
          "example": "grossAmount",
          "maxLength": 100
        },
        "label": {
          "type": "string",
          "example": "amount",
          "maxLength": 64
        },
        "type": {
          "type": "string",
          "maxLength": 16
        }
      },
      "type": "object"
    },
    "PostHeaderFieldsPayload": {
      "required": [
        "clientId"
      ],
      "properties": {
        "Payload": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostHeaderFields"
          }
        },
        "clientId": {
          "type": "string",
          "example": "c_00",
          "maxLength": 128
        }
      },
      "type": "object"
    },
    "PostTemplateFieldsResponse": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Template fields successfully saved."
        }
      },
      "type": "object"
    },
    "BadRequestTemplateFieldNotSavedError": {
      "properties": {
        "code": {
          "type": "string",
          "example": "E34"
        },
        "message": {
          "type": "string",
          "example": "Could not save template fields."
        },
        "details": {
          "type": "string",
          "example": ""
        }
      },
      "type": "object"
    },
    "GetSampleDocumentsResult": {
      "properties": {
        "results": {
          "type": "array",
          "description": "List of sample documents",
          "example": [
            {
              "status": "DONE",
              "id": "c4f25368-d3e6-43f7-a0b4-55adf7f54e95",
              "fileName": "invoice.pdf",
              "fileType": "pdf",
              "clientId": "c_00"
            },
            {
              "status": "PENDING",
              "id": "50199d80-c742-453b-830d-8e6ce14568e2",
              "fileName": "pa.png",
              "fileType": "png",
              "clientId": "c_00"
            }
          ],
          "items": {
            "$ref": "#/definitions/ListedDocument"
          }
        }
      },
      "type": "object"
    },
    "DeleteSampleDocumentStatusMessage": {
      "properties": {
        "message": {
          "type": "string",
          "example": "Documents deleted successfully."
        }
      },
      "type": "object"
    },
    "Key-value pair rules": {
      "type": "object",
      "description": "List of rules can be retrieved by GET /rules, copy single object to adapt it via POST",
      "example": {
        "validDocTypes": "invoice, purchaseOrder",
        "fieldName": "invoiceType",
        "dataType": "string",
        "countries": {
          "en": {
            "keyRules": [
              {
                "keys": [
                  "credit note",
                  "credit memo",
                  "credit invoice",
                  "credit number"
                ],
                "score": 2,
                "exact_match": false,
                "case_sensitive": false,
                "clean_pattern": "[\\W_]+"
              }
            ]
          },
          "de": {
            "keyRules": [
              {
                "keys": [
                  "stornorechnung"
                ],
                "score": 2,
                "exact_match": false,
                "case_sensitive": false,
                "clean_pattern": "[\\W_]+"
              }
            ]
          }
        },
        "description": "Type of invoice Credit/Debit note",
        "classification": {
          "condition": {
            "conditions": [
              {
                "fieldName": "grossAmount",
                "operator": "LT",
                "value1": {
                  "source": 0,
                  "type": "raw"
                }
              },
              {
                "fieldName": "netAmount",
                "operator": "LT",
                "value1": {
                  "source": 0,
                  "type": "raw"
                }
              }
            ],
            "and": false
          },
          "result": {
            "True": {
              "source": "Credit",
              "type": "raw"
            },
            "False": {
              "source": "Debit",
              "type": "raw"
            }
          }
        }
      }
    },
    "CreateRules": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Key-value pair rules"
        }
      },
      "type": "object"
    },
    "GetRulesResponse": {
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Key-value pair rules"
          }
        }
      },
      "type": "object"
    },
    "DeleteRuleRequest": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Name of the rule to delete",
            "example": "custom_rule_name"
          }
        }
      },
      "type": "object"
    },
    "DeleteRuleResponse": {
      "properties": {
        "deleted": {
          "type": "integer",
          "example": 1
        }
      },
      "type": "object"
    },
    "GetDeletedDocumentsClientDetail": {
      "properties": {
        "clientId": {
          "type": "string",
          "example": "c00"
        },
        "documents": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff"
          }
        }
      },
      "type": "object"
    },
    "GetDeletedDocumentsTenantDetail": {
      "properties": {
        "tenantId": {
          "type": "string",
          "example": "4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff"
        },
        "clients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetDeletedDocumentsClientDetail"
          }
        }
      },
      "type": "object"
    },
    "GetDeletedDocuments": {
      "properties": {
        "tenants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetDeletedDocumentsTenantDetail"
          }
        }
      },
      "type": "object"
    },
    "ConfirmDeletedDocuments": {
      "properties": {
        "successfulDeletedDocuments": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff"
          }
        },
        "documentsNotInDeletedState": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "1236cc01-72f3-4b64-9eb0-cdd9c1cb27ff"
          }
        }
      },
      "type": "object"
    },
    "InitalLoad": {
      "properties": {
        "notExistingDocuments": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "4476cc01-72f3-4b64-9eb0-cdd9c1cb27ff"
          }
        }
      },
      "type": "object"
    }
  },
  "responses": {
    "ParseError": {
      "description": "When a mask can't be parsed"
    },
    "MaskError": {
      "description": "When any error occurs on mask"
    }
  },
  "x-sap-shortText": "This API describes all the endpoints involved in Generic Document processing",
  "x-sap-api-type": "REST",
  "schemes": [
    "https"
  ],
  "host": "sandbox.api.sap.com",
  "externalDocs": {
    "description": "Document Information Extraction in SAP Help Portal",
    "url": "https://help.sap.com/dox"
  },
  "x-servers": [
    {
      "url": "https://mlfproduction-dox.cfapps.{region}.hana.ondemand.com/document-information-extraction/v1",
      "description": "Production URL",
      "templates": {
        "region": {
          "enum": [
            "eu10"
          ],
          "default": "eu10"
        },
        "suffix": {
          "description": "The suffix is normally the subaccount id and can be seen on the ML Foundation service keys"
        }
      }
    }
  ],
  "security": [
    {
      "Oauth2_ClientCredentials": []
    }
  ],
  "securityDefinitions": {
    "Oauth2_ClientCredentials": {
      "type": "oauth2",
      "tokenUrl": "https://{suffix}.authentication.{region}.hana.ondemand.com/oauth/token",
      "flow": "application",
      "scopes": {}
    }
  }
}
